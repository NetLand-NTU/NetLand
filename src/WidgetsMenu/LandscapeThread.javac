package WidgetsMenu;

import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import org.apache.commons.math.ConvergenceException;

import LandscapeDisplay.DrawLandscape;
import WidgetsButtons.TopButton;
import WindowGUI.NetLand;
import WindowGUI.WindowSimulationPanel;
import ch.epfl.lis.animation.Snake;
import ch.epfl.lis.gnw.CancelException;
import ch.epfl.lis.gnw.GeneNetwork;
import ch.epfl.lis.gnwgui.DynamicalModelElement;

class LandscapeThread implements Runnable {
	private GeneNetwork grn_;
	private DynamicalModelElement grnItem;
	/** Main Thread */
	private Thread myThread_;

	private JFrame parentFrame;
	
	private double maxExpValue;
	private int itsValue;
	private double maxTime;
	private int numTimePoints;
	private String[] focusGenes;
	private String outputPath;
	private boolean displayMethod;
	private String landscapeMethod;
	
	protected JPanel runButtonAndSnakePanel_;
	protected Snake snake_;
	protected CardLayout myCardLayout_;
	protected JPanel snakePanel_;
	protected JPanel runPanel_;
	private JDialog a;

	private static Logger log_ = Logger.getLogger(TopButton.class.getName());
	
	// ============================================================================
	// PUBLIC METHODS
	public LandscapeThread(DynamicalModelElement grnItem, double maxExpValue, int itsValue, double maxTime, int numTimePoints, String[] focusGenes, String userPath, String displayMethod, JPanel runButtonAndSnakePanel_, Snake snake_, CardLayout myCardLayout_, JPanel snakePanel_, JPanel runPanel_, JDialog a)
	{
		super();
		myThread_ = null;
		this.grnItem = grnItem;
		grn_ = grnItem.getGeneNetwork();
		this.maxExpValue = maxExpValue;
		this.itsValue = itsValue;
		this.maxTime = maxTime;
		this.numTimePoints = numTimePoints;
		this.focusGenes = focusGenes;
		this.outputPath = userPath;
		this.displayMethod = displayMethod;
		
	
		this.runButtonAndSnakePanel_ = runButtonAndSnakePanel_;
		this.snake_ = snake_;
		this.myCardLayout_ = myCardLayout_;
		this.snakePanel_ = snakePanel_;
		this.runPanel_ = runPanel_;
		this.a = a;
		
		
		Component c = a.getParent();
		while ( c.getParent() != null ){
			c = c.getParent();
		}

		if ( c instanceof JFrame )
			this.parentFrame = (JFrame) c;
		
	}

	// ----------------------------------------------------------------------------

	public void start() {
		// If myThread_ is null, we start it!
		if (myThread_ == null) {
			myThread_ = new Thread(this);
			myThread_.start();
		}
	}

	// ----------------------------------------------------------------------------

	public void stop()
	{
		myThread_ = null;
	}

	// ----------------------------------------------------------------------------

	public void run()
	{	
		snake_.start();
		myCardLayout_.show(runButtonAndSnakePanel_, snakePanel_.getName());
		
		
		try
		{
			//get Jframe
			Component c = a.getParent();
			while ( c.getParent() != null ){
				c = c.getParent();
			}

			if ( c instanceof JFrame )
				new DrawLandscape((JFrame) c, grn_, maxExpValue, itsValue, maxTime, numTimePoints, focusGenes, outputPath, displayMethod);

			finalizeAfterSuccess();
			log_.log(Level.INFO, "Done!");

		}
		catch (OutOfMemoryError e)
		{
			log_.log(Level.WARNING, "There is not enough memory available to run this program.\n" +
					"Quit one or more programs, and then try again.\n" +
					"If enough amounts of RAMÂ are installed on this computer, try to run the program " +
					"with the command-line argument -Xmx1024m to use maximum 1024Mb of memory, " +
					"-Xmx2048m to use max 2048Mb, etc.");
			JOptionPane.showMessageDialog(new Frame(), "Out of memory, see console for details.", "GNW message", JOptionPane.WARNING_MESSAGE);
			finalizeAfterFail();

		}
		catch (IllegalArgumentException e)
		{
			log_.log(Level.WARNING, e.getMessage(), e);
			JOptionPane.showMessageDialog(new Frame(), "Illegal argument, see console for details.", "GNW message", JOptionPane.WARNING_MESSAGE);
			log_.log(Level.INFO, "Potential orkaround: gene names must contain at least one char (e.g. \"5\" is not a valid gene name, but \"G5\" is)");
			finalizeAfterFail();
		}
		catch (CancelException e)
		{
			// do not display an annoying dialog to say "cancelled!"
			log_.log(Level.INFO, e.getMessage());
			finalizeAfterFail();
		}
		catch (ConvergenceException e)
		{
			log_.log(Level.WARNING, "landscape::run(): " + e.getMessage(), e);
			JOptionPane.showMessageDialog(new Frame(), "Unable to converge, see console for details.", "GNW message", JOptionPane.WARNING_MESSAGE);
			finalizeAfterFail();
		}
		catch (RuntimeException e)
		{
			log_.log(Level.WARNING, "landscape::run(): " + e.getMessage(), e);
			JOptionPane.showMessageDialog(new Frame(), "Runtime exception, see console for details.", "GNW message", JOptionPane.WARNING_MESSAGE);
			finalizeAfterFail();
		}
		catch (Exception e)
		{
			log_.log(Level.WARNING, "landscape::run(): " + e.getMessage(), e);
			JOptionPane.showMessageDialog(new Frame(), "Error encountered, see console for details.", "GNW message", JOptionPane.WARNING_MESSAGE);
			finalizeAfterFail();
		}
	}

	// ----------------------------------------------------------------------------

	public void finalizeAfterSuccess() throws IOException
	{
		snake_.stop();
		myCardLayout_.show(runButtonAndSnakePanel_, runPanel_.getName());
		
		//repaint components
		if ( parentFrame instanceof JFrame ){		
			parentFrame.getContentPane().removeAll();
			//WindowTopPanel TopPanel = new WindowTopPanel(grnItem);	
			WindowSimulationPanel simulationPanel = new WindowSimulationPanel(grnItem);		
			
			/** SET LAYOUT **/
			parentFrame.getContentPane().setLayout(new GridBagLayout());  
			// Row 1
			//NetLand.addComponent(parentFrame, TopPanel.getTopPanel(), 0, 0, 1, 1, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, 1, 0);
			// Row 2
			NetLand.addComponent(parentFrame, simulationPanel.getSimulationPanel(), 0, 1, 1, 1, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, 1, 1);

			parentFrame.invalidate();
			parentFrame.repaint();
			parentFrame.setVisible(true);			
		}
		
		escapeAction(a); // close the simulation window
	}

	
	
	protected static void escapeAction(JDialog a) {
		a.dispose();
	}
	
	
	// ----------------------------------------------------------------------------

	public void finalizeAfterFail()
	{
		snake_.stop();
		myCardLayout_.show(runButtonAndSnakePanel_, runPanel_.getName());
		//escapeAction(); // close the simulation window
	}

	public String getOutputPath() {
		return outputPath;
	}

	public void setOutputPath(String outputPath) {
		this.outputPath = outputPath;
	}
}
