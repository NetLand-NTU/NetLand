package Widgets;

import java.awt.Component;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.xml.stream.XMLStreamException;

import org.sbml.jsbml.SBMLException;
import org.sbml.jsbml.text.parser.ParseException;

import FileManager.FileChooser;
import LandscapeAnimation.LandscapePanel;
import LandscapeDisplay.DrawLandscape;
//import LandscapeDisplay.LandscapeSurfaceModel;
//import LandscapeDisplay.LandscapeView;
//import SurfacePlot.SurfaceCanvas;
import WidgetsButtons.TopButton;
import cern.colt.matrix.DoubleMatrix1D;
import cern.colt.matrix.DoubleMatrix2D;
import cern.colt.matrix.impl.DenseDoubleMatrix1D;
import ch.epfl.lis.gnw.Gene;
import ch.epfl.lis.gnw.GeneNetwork;
import ch.epfl.lis.gnw.GnwSettings;
import ch.epfl.lis.gnwgui.DynamicalModelElement;
import ch.epfl.lis.gnwgui.NetworkElement;
import ch.epfl.lis.networks.Node;

public class CopyOfLandscape extends LandscapeWindow {
	private NetworkElement item_;
	private LandscapeThread landscape = null;
	
	public CopyOfLandscape(Frame aFrame, NetworkElement item) {
		super(aFrame);		
		item_ = item;
		
		//closing listener
		this.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent windowEvent){
				if( landscape != null && landscape.myThread_.isAlive() ){
					landscape.stop();	
					JOptionPane.showMessageDialog(new Frame(), "Simulation is canceled.", "Warning!", JOptionPane.INFORMATION_MESSAGE);
				}
				escapeAction();
			}
		});

		//set core genenames
		final GeneNetwork grn = ((DynamicalModelElement) item_).getGeneNetwork();
		ArrayList<Node> nodes = grn.getNodes();
	

		String geneNames = "";
		for(int i=0;i<nodes.size();i++)
			geneNames += nodes.get(i).getLabel()+";";
		
		focusGenes.setText(geneNames);
		
		gpdmIts.setEnabled(false);
		
		
		//set plot part
		//display saved result
		if( grn.getGridData()!=null ){		
			//update parameters
			its.setText(grn.getLand_itsValue()+"");
			maxExp.setText(grn.getLand_maxExpValue()+"");
			maxT.setText(grn.getLand_maxTime()+"");
			
			geneNames = "";
			for(int i=0;i<grn.getLand_focusGenesList().length;i++)
				geneNames += grn.getLand_focusGenesList()[i]+";";
			
			focusGenes.setText(geneNames);

			if( grn.isLand_isTwoGenes() ){
				randioButton11.setSelected(true);
				randioButton31.setSelected(false);
			}else{
				randioButton11.setSelected(false);
				randioButton31.setSelected(true);
			}
			
			this.gpdmIts.setText(grn.getLand_gpdmitsValue()+"");
			
		}
		
		
		
		//button functions
		browse_.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent arg0) {
				try {
		            JFileChooser c = new FileChooser();
		            int result = c.showSaveDialog(new JFrame());
		            if(result == JFileChooser.APPROVE_OPTION){
		                c.approveSelection();
		                userPath_.setText(c.getSelectedFile().getAbsolutePath());
		            }
		        } catch (HeadlessException e) {
		            MsgManager.Messages.errorMessage(e, "Error", "Cannot create a new file!");
		        }	
			}
		});
		
		clear_.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent arg0) {
				userPath_.setText("");
			}
		});
		
		runButton_.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent arg0) {	
				String text = focusGenes.getText();
				text = text.replaceAll(" ","");
				String[] lines = text.split(";");			
				String[] focusGenes = new String[lines.length];
				for(int i=0;i<lines.length;i++){
					focusGenes[i] = lines[i];
				}
								
				enterAction(item_);
			}
		});

		cancelButton_.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent arg0) {
				if( landscape != null )
					landscape.stop();
			}
		});
		
//		randioButton3.addActionListener(new ActionListener() {
//			public void actionPerformed(final ActionEvent arg0) {
//				randioButton11.setEnabled(false);
//				randioButton31.setSelected(true);
//				randioButton11.setSelected(false);
//			}
//		});
		
		randioButton1.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent arg0) {
				randioButton11.setEnabled(true);
				randioButton31.setSelected(false);
				randioButton11.setSelected(true);
			}
		});
		
		randioButton11.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent arg0) {
				gpdmIts.setEnabled(false);
			}
		});
		
		randioButton31.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent arg0) {
				gpdmIts.setEnabled(true);
				//focusGenes.setEnabled(false);
			}
		});
	}
	
	
	public void enterAction(NetworkElement item) {
		try {
			
			//converted to dynamic model
			DynamicalModelElement grnItem = new DynamicalModelElement((DynamicalModelElement) item);	
			
			if( grnItem.getGeneNetwork().getNodes().size() <= 1 ){
				JOptionPane.showMessageDialog(null, "The system only contains "+grnItem.getGeneNetwork().getNodes().size()+" reaction! To plot the landscape, at least two kinetic reactions are required.", "Error", JOptionPane.INFORMATION_MESSAGE);
				return;
			}

			GnwSettings settings = GnwSettings.getInstance(); 				
			
			landscape = new LandscapeThread(grnItem);
			settings.stopBenchmarkGeneration(false); // reset
			
			// be sure to have set the output directory before running the simulation
			landscape.start();
		}
		catch (Exception e){
			JOptionPane.showMessageDialog(null, "Error in running Landscape!", "Error", JOptionPane.INFORMATION_MESSAGE);
			MsgManager.Messages.errorMessage(e, "Error", "");
		}

	}
	
	
	
	public class LandscapeThread implements Runnable {
		private GeneNetwork grn_;
		/** Main Thread */
		private Thread myThread_;
		private volatile boolean stopRequested;

		private double maxExpValue;
		private int itsValue;
		private int maxTime;
		private int numTimePoints;
		private String[] focusGenesList;
		private String outputPath;
		private String landscapeMethod;
		private boolean displayMethod = true; //default two markers
		private int gpdmItsValue = 0;

//		Logger log_ = Logger.getLogger(TopButton.class.getName());
		
		// ============================================================================
		// PUBLIC METHODS
		public LandscapeThread(DynamicalModelElement grnItem)
		{
			super();
			myThread_ = null;
			stopRequested = false;
			
			grn_ = grnItem.getGeneNetwork();
			maxExpValue = Double.parseDouble(maxExp.getText());
			itsValue = Integer.parseInt(its.getText());
			maxTime = Integer.parseInt(maxT.getText());
			
			numTimePoints = (int) (maxTime*2+1);
			focusGenesList = focusGenes.getText().split(";");
			outputPath = userPath_.getText();
			if( randioButton1.isSelected() )
				landscapeMethod = "probabilistic";
			else
				landscapeMethod = "entropy";
			
			if( randioButton11.isSelected() )//select two markers
				displayMethod = true;
			else{ //gpdm
				displayMethod = false;	
				gpdmItsValue = Integer.parseInt(gpdmIts.getText());
			}
		}

		// ----------------------------------------------------------------------------

		public void start() {
			// If myThread_ is null, we start it!
			if (myThread_ == null) {
				myThread_ = new Thread(this);
				stopRequested = false;
				myThread_.start();
			}
		}

		// ----------------------------------------------------------------------------

		public void stop(){
			stopRequested = true;

			if( myThread_ != null )
				myThread_.interrupt();
		}

		// ----------------------------------------------------------------------------

		public void run()
		{	
			snake_.start();
			myCardLayout_.show(runButtonAndSnakePanel_, snakePanel_.getName());
			
			Component c = snake_.getParent();
			while ( c.getParent() != null ){
				c = c.getParent();
			}

			if ( c instanceof JFrame )
			{
				try{		
					if( randioButton11.isSelected() )//select two markers
						System.out.print("Start to construct Landscape\n");
					else //gpdm
						System.out.print("Start to construct Landscape using GPDM\n");
					
					
					DrawLandscape instance = new DrawLandscape((JFrame) c, grn_, maxExpValue, itsValue, maxTime, numTimePoints, focusGenesList, outputPath, landscapeMethod, displayMethod, gpdmItsValue);

					if( instance.isStable() ){
						finalizeAfterSuccess();
						//log_.log(Level.INFO, "Done!");
						System.out.print("Done!\n");
					}else{
						snake_.stop();
						myCardLayout_.show(runButtonAndSnakePanel_, runPanel_.getName());
						dispose();
						
						JOptionPane.showMessageDialog(new Frame(), "Cannot find a steady state.", "Warning", JOptionPane.INFORMATION_MESSAGE);
					}
				}
				catch (OutOfMemoryError e)
				{
//					log_.log(Level.WARNING, "There is not enough memory available to run this program.\n" +
//							"Quit one or more programs, and then try again.\n" +
//							"If enough amounts of RAM are installed on this computer, try to run the program " +
//							"with the command-line argument -Xmx1024m to use maximum 1024Mb of memory, " +
//							"-Xmx2048m to use max 2048Mb, etc.");
					JOptionPane.showMessageDialog(new Frame(), "There is not enough memory available to run this program.\n" +
							"Quit one or more programs, and then try again.\n" +
							"If enough amounts of RAM are installed on this computer, try to run the program " +
							"with the command-line argument -Xmx1024m to use maximum 1024Mb of memory, " +
							"-Xmx2048m to use max 2048Mb, etc.", "Out of memory", JOptionPane.INFORMATION_MESSAGE);
					finalizeAfterFail();

				}
				catch (IllegalArgumentException e)
				{
					//log_.log(Level.WARNING, e.getMessage(), e);
					JOptionPane.showMessageDialog(new Frame(), "Illegal argument", "Error", JOptionPane.INFORMATION_MESSAGE);
					MsgManager.Messages.errorMessage(e, "Error", "");
					//log_.log(Level.INFO, "Potential orkaround: gene names must contain at least one char (e.g. \"5\" is not a valid gene name, but \"G5\" is)");
					finalizeAfterFail();
				}
				catch (RuntimeException e)
				{
					//log_.log(Level.WARNING, "landscape::run(): " + e.getMessage(), e);
					JOptionPane.showMessageDialog(new Frame(), "Error in execution!", "Runtime exception", JOptionPane.INFORMATION_MESSAGE);
					MsgManager.Messages.errorMessage(e, "Runtime exception", "");
					finalizeAfterFail();
				}
				catch (Exception e)
				{
					//log_.log(Level.WARNING, "landscape::run(): " + e.getMessage(), e);
					MsgManager.Messages.errorMessage(e, "Error", "");
					finalizeAfterFail();
				}
			}
		}

		// ----------------------------------------------------------------------------

		public void finalizeAfterSuccess() 
		{
			snake_.stop();
			myCardLayout_.show(runButtonAndSnakePanel_, runPanel_.getName());
			dispose();
			
			LandscapePanel onea = new LandscapePanel(grn_, displayMethod);	
			
			if( !outputPath.isEmpty() )
				saveLand();
			
			//showDataButton_.setVisible(true);
			
			
//			//display result
//			landPlot.removeAll();
//			try {
//				landPlot.add(landscapeTabb(item_));
//				
//				landPlot.updateUI();
//				landPlot.setVisible(true);	
//				landPlot.repaint();
//				
//				if( !outputPath.isEmpty() )
//					saveLand();
//			} catch (IOException e) {
//				JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
//			}
			
		}

		private void saveLand(){
			//first part: SBML
			grn_.setId("NetLand_"+grn_.getId());
			String outputNewPointName = "temp_"+System.currentTimeMillis();
			String temppath = System.getProperty("java.io.tmpdir");
			File fnew = new File(temppath);

			try {
				File fTempnew = File.createTempFile(outputNewPointName, ".sbml", fnew);			
				URL url = fTempnew.toURI().toURL();
				grn_.writeSBML(url);	
				
				//second part: land info	
				String outputNewPointName1 = "temp_"+System.currentTimeMillis();
				String temppath1 = System.getProperty("java.io.tmpdir");
				File fnew1 = new File(temppath1);
				File fTempnew1 = File.createTempFile(outputNewPointName1, ".landscape", fnew1);
				FileWriter fw = new FileWriter(fTempnew1.getPath(), false);

				fw.write("\n\nLand\t"+grn_.getMaxX()+"\t"+grn_.getMinX()+"\t"+grn_.getMaxY()+"\t"+grn_.getMinY()+"\n");
				

				//write parameters
				fw.write(grn_.getSize()+"\t"+maxExpValue+"\t"+itsValue+"\t"+maxTime+"\t"+displayMethod+"\t"+gpdmIts.getText()+"\n");
				
				for(int i=0;i<focusGenesList.length;i++)
					fw.write(focusGenesList[i]+"\t");
				fw.write("\n");
				
				//write x
				for(int i=0;i<grn_.getX().size();i++)
					fw.write(grn_.getX().get(i)+"\t");
				fw.write("\n");
				
				//write y
				for(int i=0;i<grn_.getY().size();i++)
					fw.write(grn_.getY().get(i)+"\t");
				fw.write("\n");
				
				//write counts
				for(int i=0;i<grn_.getCounts().length;i++)
					fw.write(grn_.getCounts()[i]+"\t");
				fw.write("\n");
				
				
				//write sumpara
				for(int i=0;i<grn_.getSumPara().rows();i++){
					for(int j=0;j<grn_.getSumPara().columns();j++)
						fw.write(grn_.getSumPara().get(i,j)+"\t");
					fw.write("\n");
				}
				
				//write allY for gpdm				
				if( !displayMethod ){//only for gpdm
					fw.write(grn_.getAllY().rows()+"\t"+grn_.getAllY().columns()+"\n");
					
					for(int i=0;i<grn_.getAllY().rows();i++){
						for(int j=0;j<grn_.getAllY().columns();j++)
							fw.write(grn_.getAllY().get(i, j)+"\t");
						fw.write("\n");
					}
				}
				
				
				//write size of griddata
				fw.write(grn_.getGridData().rows()+"\t"+grn_.getGridData().columns()+"\n");
				
				//write griddata
				for(int i=0;i<grn_.getGridData().rows();i++){
					for(int j=0;j<grn_.getGridData().columns();j++)
						fw.write(grn_.getGridData().get(i, j)+"\t");
					fw.write("\n");
				}
				
				if( !displayMethod ){
					//write origAllY
					fw.write(grn_.getOrigAllY().rows()+"\t"+grn_.getOrigAllY().columns()+"\n");

					for(int i=0;i<grn_.getOrigAllY().rows();i++){
						for(int j=0;j<grn_.getOrigAllY().columns();j++)
							fw.write(grn_.getOrigAllY().get(i, j)+"\t");
						fw.write("\n");
					}
				}
				
				fw.close();
				
				//merge
				String output = outputPath;
				DrawLandscape.mergeFiles(output, new String[]{fTempnew.getAbsolutePath(), fTempnew1.getAbsolutePath()});
				
				fTempnew.delete();
				fTempnew1.delete();
				
				System.out.print("Save the landsacpe to "+outputPath+"\n");
			} catch (IOException e1) {
				JOptionPane.showMessageDialog(null,  "Cannot create a new file!", "Error", JOptionPane.INFORMATION_MESSAGE);
				MsgManager.Messages.errorMessage(e1, "Error", "");
			} catch (SBMLException e) {
				JOptionPane.showMessageDialog(null, "Cannot write file!", "Error", JOptionPane.INFORMATION_MESSAGE);
				MsgManager.Messages.errorMessage(e, "Error", "");
			} catch (XMLStreamException e) {
				JOptionPane.showMessageDialog(null,  "Invalid format!", "Error", JOptionPane.INFORMATION_MESSAGE);
				MsgManager.Messages.errorMessage(e, "Error", "");
			} catch (ParseException e) {
				JOptionPane.showMessageDialog(null,  "Error in parsing the file!", "Error", JOptionPane.INFORMATION_MESSAGE);
				MsgManager.Messages.errorMessage(e, "Error", "");
			}
			
			
		}
		
		// ----------------------------------------------------------------------------

		public void finalizeAfterFail()
		{
			snake_.stop();
			myCardLayout_.show(runButtonAndSnakePanel_, runPanel_.getName());
			//escapeAction(); // close the simulation window
		}

		public String getOutputPath() {
			return outputPath;
		}

		public void setOutputPath(String outputPath) {
			this.outputPath = outputPath;
		}
	}
	
	//display the landscape
//	public JPanel landscapeTabb_loadsavedLandscape(final NetworkElement item) {	
//		/** first Tab: Landscape **/
//		boolean displayMethod = true;
//		if( randioButton11.isSelected() )//select two markers
//			displayMethod = true;
//		else //gpdm
//			displayMethod = false;			
//
//		//two comboboxes
//		//generate geneList
//		GeneNetwork grn = ((DynamicalModelElement) item).getGeneNetwork();
//		String[] geneList = new String[grn.getNodes().size()];
//		for(int i=0;i<grn.getNodes().size();i++)
//			geneList[i] = grn.getNodes().get(i).getLabel();
//
//		JPanel bottomPanel = new JPanel();
//
//		//get displayMethod: probabilistic, gpdm, entropy
//		String landscapeMethod = grn.getDisplayMethod();
//		if( landscapeMethod.equals("probabilistic") && displayMethod ){
//			//add two combo
//			final JComboBox<String> combo1=new JComboBox<String>(geneList);
//			combo1.setBorder(BorderFactory.createTitledBorder("X-axis"));
//			final JComboBox<String> combo2=new JComboBox<String>(geneList);
//			combo2.setSelectedIndex(0);
//			combo2.setBorder(BorderFactory.createTitledBorder("Y-axis"));   
//
//			//combo actions
//			combo1.addActionListener(new ActionListener(){
//				public void actionPerformed(ActionEvent e) {
//					if(item instanceof StructureElement)
//						JOptionPane.showMessageDialog(null, "Not dynamic Model!Run simulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//					else if(item instanceof DynamicalModelElement){
//						GeneNetwork grn = ((DynamicalModelElement)item).getGeneNetwork();
//
//						if(grn.getCounts().length<=0){
//							//								JOptionPane.showMessageDialog(null, "Run LandscapeSimulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//						}else{
//							int indexX = combo1.getSelectedIndex();
//							int indexY = combo2.getSelectedIndex();
//							String axisX = (String) combo1.getSelectedItem();
//							String axisY = (String) combo2.getSelectedItem();
//
//							//get Jframe
//							try {
//								generateFigure(landViewPanel, grn, indexX, indexY, axisX, axisY);
//							} catch (IOException e1) {
//								JOptionPane.showMessageDialog(null, e1.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
//							}
//						}
//					}
//				}
//			});
//
//			combo2.addActionListener(new ActionListener(){
//				public void actionPerformed(ActionEvent e) {
//					if(item instanceof StructureElement)
//						JOptionPane.showMessageDialog(null, "Not dynamic Model!Run simulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//					else if(item instanceof DynamicalModelElement){
//						GeneNetwork grn = ((DynamicalModelElement)item).getGeneNetwork();
//
//						if(grn.getCounts().length<=0){
//							//								JOptionPane.showMessageDialog(null, "Run LandscapeSimulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//						}else{
//							int indexX = combo1.getSelectedIndex();
//							int indexY = combo2.getSelectedIndex();
//							String axisX = (String) combo1.getSelectedItem();
//							String axisY = (String) combo2.getSelectedItem();
//
//							//get Jframe
//							try {
//								generateFigure(landViewPanel, grn, indexX, indexY, axisX, axisY);
//							} catch (IOException e1) {
//								JOptionPane.showMessageDialog(null, e1.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
//							}
//						}
//					}
//				}
//			});
//
//			if(grn.getCounts()==null){
//				JOptionPane.showMessageDialog(null, "Cannot load Landscape!", "Error", JOptionPane.INFORMATION_MESSAGE);
//			}else{
//				int indexX = combo1.getSelectedIndex();
//				int indexY = combo2.getSelectedIndex();
//				String axisX = (String) combo1.getSelectedItem();
//				String axisY = (String) combo2.getSelectedItem();
//
//				//get Jframe
//				try {
//					generateFigure_loadLand(landViewPanel, grn, indexX, indexY, axisX, axisY);
//				} catch (IOException e1) {
//					JOptionPane.showMessageDialog(null, e1.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
//				}
//			}
//
//
//			//set layout
//			bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.X_AXIS));
//			combo1.setBackground(Color.white);
//			combo2.setBackground(Color.white);
//			bottomPanel.add(combo1);
//			bottomPanel.add(combo2);
//
//		}else if( landscapeMethod.equals("probabilistic") && !displayMethod ){
//			//LandscapeView			
//			if(grn.getCounts()==null)
//				JOptionPane.showMessageDialog(null, "Cannot load Landscape!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//			else
//				try {
//					generateFigure_loadLand(landViewPanel, grn, -1, -1, "Component1", "Component2");
//				} catch (IOException e) {
//					JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
//				}
//
//			//set layout
//			bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.X_AXIS));		
//		}
//
//		JPanel LandPanel = new JPanel();
//		LandPanel.setLayout(new GridBagLayout());
//		NetLand.addComponent(LandPanel, landViewPanel.getCanvas(), 0, 0, 1, 1, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, 0, 1);
//		NetLand.addComponent(LandPanel, bottomPanel, 0, 1, 1, 1, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, 1, 0);
//
//		return LandPanel;
//	}
	
//	public void generateFigure_loadLand(LandscapeView landViewPanel, GeneNetwork grn_, int indexX, int indexY, String axisX, String axisY) throws IOException{
//		SurfaceCanvas canvas = landViewPanel.getCanvas();	
//		
//		
//		//draw selection two genes
//		if( indexX != -1 && indexX != -2 ){
//			double stepSize = 0.1; 
//			double[] x = grn_.getX().toArray();
//			double[] y = grn_.getY().toArray();
//			
//			double[][] gridData = grn_.getGridData().toArray();			
//
//			double maxU = 0; double minU = 100000;
//			for(int i=0;i<x.length;i++)
//				for(int j=0;j<y.length;j++){
//					if( gridData[i][j]<minU )
//						minU = gridData[i][j];
//					if( gridData[i][j]>maxU )
//						maxU = gridData[i][j];
//				}
//			
//			//refresh figure
//			canvas.destroyImage();
//			
//			LandscapeSurfaceModel model = new LandscapeSurfaceModel();
//			model.setXAxisLabel(axisX);
//			model.setYAxisLabel(axisY);
//			model.setZAxisLabel("U");
//			model.setXMax(x[x.length-1]);
//			model.setXMin(x[0]);
//			model.setYMax(y[y.length-1]);
//			model.setYMin(y[0]);
//			model.setZMax(maxU);
//			model.setZMin(minU);
//			model.setStepSizeX(stepSize);
//			model.setStepSizeY(stepSize);
//			model.setGridData(gridData);
//			model.setGPDM(false);
//			
//			canvas.setModel(model);
//			canvas.repaint();
//		}
//		//draw gpdm
//		else if( indexX == -1 ){			
//			double[][] gridData = grn_.getGridData().toArray();			
//
//			double maxU = 0; double minU = 100000;
//			int rowsGriddata = gridData.length;
//			for(int i=0;i<rowsGriddata;i++)
//				for(int j=0;j<rowsGriddata;j++){
//					if( gridData[i][j]<minU )
//						minU = gridData[i][j];
//					if( gridData[i][j]>maxU )
//						maxU = gridData[i][j];
//				}
//			
//			//refresh figure
//			canvas.destroyImage();
//			
//			LandscapeSurfaceModel model = new LandscapeSurfaceModel();
//			model.setXAxisLabel(axisX);
//			model.setYAxisLabel(axisY);
//			model.setZAxisLabel("U");
//			double xmax = grn_.getMaxX();
//			double xmin = grn_.getMinX();
//			
//			double ymax = grn_.getMaxY();
//			double ymin = grn_.getMinY();
//			
//			double stepx = (xmax-xmin)/(rowsGriddata-1);
//			double stepy = (ymax-ymin)/(rowsGriddata-1);
//			
//			xmax = xmin + stepx*30;
//			ymax = ymin + stepy*30;
//			
//			double[] x1 = LandscapeView.increment(xmin, stepx, xmax);
//			double[] y1 = LandscapeView.increment(ymin, stepy, ymax);
// 			
//			
//			
//			model.setXMax(x1[x1.length-1]);			
//			model.setXMin(x1[0]);		
//			model.setYMax(y1[y1.length-1]);		
//			model.setYMin(y1[0]);
//			model.setZMax(maxU);
//			model.setZMin(minU);
//		
//	
////			grn_.setMaxX((float) x1[x1.length-1]);
////			grn_.setMinX((float) x1[0]);
////			grn_.setMaxY((float) y1[y1.length-1]);
////			grn_.setMinY((float) y1[0]);
////			grn_.setX(new DenseDoubleMatrix1D(x1));
////			grn_.setY(new DenseDoubleMatrix1D(y1));
//			
//			model.setStepSizeX(stepx);
//			model.setStepSizeY(stepy);
//			model.setGridData(gridData);
//			model.setGPDM(true);
//			
//			canvas.setModel(model);
//			canvas.repaint();
//			
//		}//end of else gpdm		
//		
//	}
	
	
	//display the landscape
//	public JPanel landscapeTabb(final NetworkElement item) throws IOException{	
//		/** first Tab: Landscape **/
//		boolean displayMethod = true;
//		if( randioButton11.isSelected() )//select two markers
//			displayMethod = true;
//		else //gpdm
//			displayMethod = false;			
//		
//		//two comboboxes
//		//generate geneList
//		GeneNetwork grn = ((DynamicalModelElement) item).getGeneNetwork();
//		String[] geneList = new String[grn.getNodes().size()];
//		for(int i=0;i<grn.getNodes().size();i++)
//			geneList[i] = grn.getNodes().get(i).getLabel();
//		
//		JPanel bottomPanel = new JPanel();
//		
//		//get displayMethod: probabilistic, gpdm, entropy
//		String landscapeMethod = grn.getDisplayMethod();
//		if( landscapeMethod.equals("probabilistic") && displayMethod ){
//			//add two combo
//			final JComboBox<String> combo1=new JComboBox<String>(geneList);
//			combo1.setBorder(BorderFactory.createTitledBorder("X-axis"));
//			final JComboBox<String> combo2=new JComboBox<String>(geneList);
//			combo2.setSelectedIndex(0);
//			combo2.setBorder(BorderFactory.createTitledBorder("Y-axis"));   
//
//			//combo actions
//			combo1.addActionListener(new ActionListener(){
//				public void actionPerformed(ActionEvent e) {
//					if(item instanceof StructureElement)
//						JOptionPane.showMessageDialog(null, "Not dynamic Model!Run simulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//					else if(item instanceof DynamicalModelElement){
//						GeneNetwork grn = ((DynamicalModelElement)item).getGeneNetwork();
//
//						if(grn.getCounts().length<=0){
////							JOptionPane.showMessageDialog(null, "Run LandscapeSimulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//						}else{
//							int indexX = combo1.getSelectedIndex();
//							int indexY = combo2.getSelectedIndex();
//							String axisX = (String) combo1.getSelectedItem();
//							String axisY = (String) combo2.getSelectedItem();
//
//							//get Jframe
//							try {
//								generateFigure(landViewPanel, grn, indexX, indexY, axisX, axisY);
//							} catch (IOException e1) {
//								JOptionPane.showMessageDialog(null, e1.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
//							}
//						}
//					}
//				}
//			});
//
//			combo2.addActionListener(new ActionListener(){
//				public void actionPerformed(ActionEvent e) {
//					if(item instanceof StructureElement)
//						JOptionPane.showMessageDialog(null, "Not dynamic Model!Run simulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//					else if(item instanceof DynamicalModelElement){
//						GeneNetwork grn = ((DynamicalModelElement)item).getGeneNetwork();
//
//						if(grn.getCounts().length<=0){
////							JOptionPane.showMessageDialog(null, "Run LandscapeSimulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//						}else{
//							int indexX = combo1.getSelectedIndex();
//							int indexY = combo2.getSelectedIndex();
//							String axisX = (String) combo1.getSelectedItem();
//							String axisY = (String) combo2.getSelectedItem();
//
//							//get Jframe
//							try {
//								generateFigure(landViewPanel, grn, indexX, indexY, axisX, axisY);
//							} catch (IOException e1) {
//								JOptionPane.showMessageDialog(null, e1.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
//							}
//						}
//					}
//				}
//			});
//		
//			if(grn.getCounts()==null){
//				//				JOptionPane.showMessageDialog(null, "Run LandscapeSimulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//			}else{
//				int flag = 0;
////				for(int k1=0;k1<grn.getCounts().length;k1++){
////					if(grn.getCounts()[k1]==0){
////						JOptionPane.showMessageDialog(null, "Attractor"+(k1+1)+" is not found!", "Error", JOptionPane.INFORMATION_MESSAGE);
////						flag = 1;
////					}
////				}
//			
//				if( flag == 0 ){
//					int indexX = combo1.getSelectedIndex();
//					int indexY = combo2.getSelectedIndex();
//					String axisX = (String) combo1.getSelectedItem();
//					String axisY = (String) combo2.getSelectedItem();
//
//					//get Jframe
//					generateFigure(landViewPanel, grn, indexX, indexY, axisX, axisY);
//				}
//			}
//				
//		
//			//set layout
//			bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.X_AXIS));
//			combo1.setBackground(Color.white);
//			combo2.setBackground(Color.white);
//			bottomPanel.add(combo1);
//			bottomPanel.add(combo2);
//			
//		}else if( landscapeMethod.equals("probabilistic") && !displayMethod ){
//			//LandscapeView			
//			if(grn.getCounts()==null){
//				//				JOptionPane.showMessageDialog(null, "Run LandscapeSimulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//			}else{
//				int flag = 0;
////				for(int k1=0;k1<grn.getCounts().length;k1++){
////					if(grn.getCounts()[k1]==0){
////						JOptionPane.showMessageDialog(null, "Attractor"+(k1+1)+" is not found!", "Error", JOptionPane.INFORMATION_MESSAGE);
////						flag = 1;
////					}
////				}
//			
//				if( flag == 0 ){
//					//get Jframe
//					generateFigure(landViewPanel, grn, -1, -1, "Component1", "Component2");
//				}
//			}
//				
//		
//			//set layout
//			bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.X_AXIS));		
//		}else if( landscapeMethod.equals("entropy") && !displayMethod ){
//			//LandscapeView			
//			if(grn.getCounts()==null){
//				//				JOptionPane.showMessageDialog(null, "Run LandscapeSimulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//			}else{
//				int flag = 0;
////				for(int k1=0;k1<grn.getCounts().length;k1++){
////					if(grn.getCounts()[k1]==0){
////						JOptionPane.showMessageDialog(null, "Attractor"+(k1+1)+" is not found!", "Error", JOptionPane.INFORMATION_MESSAGE);
////						flag = 1;
////					}
////				}
//			
//				if( flag == 0 ){
//					//get Jframe
//					generateFigure(landViewPanel, grn, -2, -2, "Component1", "Component2");
//				}
//			}
//				
//		
//			//set layout
//			bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.X_AXIS));	
//		}
//
//		
//		JPanel LandPanel = new JPanel();
//		LandPanel.setLayout(new GridBagLayout());
//		NetLand.addComponent(LandPanel, landViewPanel.getCanvas(), 0, 0, 1, 1, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, 0, 1);
//		NetLand.addComponent(LandPanel, bottomPanel, 0, 1, 1, 1, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, 1, 0);
//	
//		return LandPanel;
//	}
//
//	public void generateFigure(LandscapeView landViewPanel, GeneNetwork grn_, int indexX, int indexY, String axisX, String axisY) throws IOException{
//		SurfaceCanvas canvas = landViewPanel.getCanvas();	
//		
//		//get its
//		int its = 0;
//		
//		for(int k1=0;k1<grn_.getCounts().length;k1++)
//			its += grn_.getCounts()[k1];
//	
//
//		int n = grn_.getSize();
//		double maxU = 0; double minU = 100000;
//		
//		
//		//draw selection two genes
//		if( indexX != -1 && indexX != -2 ){
//			double stepSize = 0.1; 
//			double[] x = LandscapeView.increment(0.0, stepSize, grn_.getLand_maxExpValue());
//			double[] y = LandscapeView.increment(0.0, stepSize,  grn_.getLand_maxExpValue());
//			
//			double[][] gridData = new double[x.length][y.length];	
//			
//			for(int i=0;i<x.length;i++){
//				for(int j=0;j<y.length;j++){
//					double u = 0;
//					//all types
//					for(int k1=0;k1<grn_.getSumPara().rows();k1++){
//						double u1 = Math.exp(-1.0*Math.pow((x[i]-grn_.getSumPara().get(k1, indexX)), 2)/2.0/grn_.getSumPara().get(k1, indexX+n))/grn_.getSumPara().get(k1, indexX+n)/Math.sqrt(2.0*Math.PI);
//						double u2 = Math.exp(-1.0*Math.pow((y[j]-grn_.getSumPara().get(k1, indexY)), 2)/2.0/grn_.getSumPara().get(k1, indexY+n))/grn_.getSumPara().get(k1, indexY+n)/Math.sqrt(2.0*Math.PI);
//						u += u1*u2*grn_.getCounts()[k1]/((double)its);
//					}
//					
//					double up = -1.0*Math.log(u);
//					if( up>100 )
//						up=100;
//
//					gridData[i][j] = up;
//
//
//					if(gridData[i][j] >maxU)
//						maxU = gridData[i][j] ;
//					if(gridData[i][j] <minU)
//						minU = gridData[i][j] ;
//				}
//			}
//			
//			//set grn
//			grn_.setX(new DenseDoubleMatrix1D(x));
//			grn_.setY(new DenseDoubleMatrix1D(y));
//			grn_.setGridData(new DenseDoubleMatrix2D(gridData));
//			
//			double xMax = x[0];
//			double xMin = x[0];
//			for(int i=1;i<x.length;i++){
//				if( xMax<x[i] )
//					xMax = x[i];
//				if( xMin>x[i] )
//					xMin = x[i];
//			}
//			
//			double yMax = y[0];
//			double yMin = y[0];
//			for(int i=1;i<y.length;i++){
//				if( yMax<y[i] )
//					yMax = y[i];
//				if( yMin>y[i] )
//					yMin = y[i];
//			}
//			
//			grn_.setMaxX(xMax);
//			grn_.setMinX(xMin);
//			grn_.setMaxY(yMax);
//			grn_.setMinY(yMin);
//			grn_.setN(x.length-1);
//			
//			//refresh figure
//			canvas.destroyImage();
//			
//			LandscapeSurfaceModel model = new LandscapeSurfaceModel();
//			model.setXAxisLabel(axisX);
//			model.setYAxisLabel(axisY);
//			model.setZAxisLabel("U");
//			model.setXMax(x[x.length-1]);
//			model.setXMin(x[0]);
//			model.setYMax(y[y.length-1]);
//			model.setYMin(y[0]);
//			model.setZMax(maxU);
//			model.setZMin(minU);
//			model.setStepSizeX(stepSize);
//			model.setStepSizeY(stepSize);
//			model.setGridData(gridData);
//			model.setGPDM(false);
//			
//			canvas.setModel(model);
//			canvas.repaint();
//		}
//		//draw gpdm
//		else if( indexX == -1 ){
//			double[] x = LandscapeView.increment(grn_.getMinX(), (grn_.getMaxX()-grn_.getMinX())/grn_.getN(), grn_.getMaxX());
//			double[] y = LandscapeView.increment(grn_.getMinY(), (grn_.getMaxY()-grn_.getMinY())/grn_.getN(), grn_.getMaxY());
//			DoubleMatrix2D Yout = grn_.getAllY();
//			
//			double[][] gridData = new double[x.length][y.length];	
//			
//			int countNum = 0;
//			for(int i=0;i<x.length;i++){
//				for(int j=0;j<y.length;j++){
//					DoubleMatrix1D currentY = Yout.viewRow(countNum);
//					double u = 0;
//					//all types
//					for(int k1=0;k1<grn_.getSumPara().rows();k1++){
//						double u1 = 1;
//						for(int index=0;index<currentY.size();index++){
//							currentY.set(index, Math.abs(currentY.get(index)));
//							u1 *= Math.exp(-1.0*Math.pow((currentY.get(index)-grn_.getSumPara().get(k1, index)), 2)/2.0/grn_.getSumPara().get(k1, index+n))/grn_.getSumPara().get(k1, index+n)/Math.sqrt(2.0*Math.PI);
//						}
//						
//						//in case that u1 is too large
//						if( u1>100 )
//							u1=100;
//						u += u1*grn_.getCounts()[k1]/((double)its);
//					}
//
//					double up = -1.0*Math.log(u);
//					if( up>100 )
//						up=100;
//
//					gridData[i][j] = up;
//
//
//					if(gridData[i][j] >maxU)
//						maxU = gridData[i][j] ;
//					if(gridData[i][j] <minU)
//						minU = gridData[i][j] ;
//					
//					countNum++;
//				}
//			}
//			
//			//set data output
//			grn_.setGridData(new DenseDoubleMatrix2D(gridData));
//			
//			//refresh figure
//			canvas.destroyImage();
//			
//			LandscapeSurfaceModel model = new LandscapeSurfaceModel();
//			model.setXAxisLabel(axisX);
//			model.setYAxisLabel(axisY);
//			model.setZAxisLabel("U");
//			double xmax = x[x.length-1];
//			double xmin = x[0];
//			
//			double ymax = y[y.length-1];
//			double ymin = y[0];
//			
//			double stepx = (xmax-xmin)/grn_.getN();
//			double stepy = (ymax-ymin)/grn_.getN();
//			
//			xmax = xmin + stepx*grn_.getN();
//			ymax = ymin + stepy*grn_.getN();
//			
//			double[] x1 = LandscapeView.increment(xmin, stepx, xmax);
//			double[] y1 = LandscapeView.increment(ymin, stepy, ymax);
// 			
//			
//			
//			model.setXMax(x1[x1.length-1]);			
//			model.setXMin(x1[0]);		
//			model.setYMax(y1[y1.length-1]);		
//			model.setYMin(y1[0]);
//			model.setZMax(maxU);
//			model.setZMin(minU);
//	
//			grn_.setMaxX(x1[x1.length-1]);
//			grn_.setMinX(x1[0]);
//			grn_.setMaxY(y1[y1.length-1]);
//			grn_.setMinY(y1[0]);
//			grn_.setX(new DenseDoubleMatrix1D(x1));
//			grn_.setY(new DenseDoubleMatrix1D(y1));
//			
//			model.setStepSizeX(stepx);
//			model.setStepSizeY(stepy);
//			model.setGridData(gridData);
//			model.setGPDM(true);
//			
//			canvas.setModel(model);
//			canvas.repaint();
//			
//		}//end of else gpdm
////		else{ //display of entropy
////			double[] x = LandscapeView.increment(grn_.getMinX(), (grn_.getMaxX()-grn_.getMinX())/grn_.getN(), grn_.getMaxX());
////			double[] y = LandscapeView.increment(grn_.getMinY(), (grn_.getMaxY()-grn_.getMinY())/grn_.getN(), grn_.getMaxY());
////			DoubleMatrix2D Yout = grn_.getAllY();
////			
////			//calculate the network entropy
////			//write entropy
////			//input file
////			String filename = "temp_"+System.currentTimeMillis();
////			String temppath = System.getProperty("java.io.tmpdir");
////			File f = new File(temppath);
////			File fTemp = File.createTempFile(filename, ".entropy_input", f);
////				
////			URL url = fTemp.toURI().toURL();
////			writeEntropy(url,Yout);		
////
////			//output file
////			String outputModelName = "temp_"+System.currentTimeMillis();
////			File fout = new File(temppath);
////			File fTempout = File.createTempFile(outputModelName, ".entropy_output", fout);
////
////			//run GPDM
////			runNetworkEntropy(temppath,fTemp.getName(),fTempout.getName());
////
////			//read output file
////			double[][] gridData = new double[x.length][y.length];	
////			readEntropyOutput(fTempout, gridData, x.length);
////
////			//draw landscape
////			for(int i=0;i<x.length;i++){
////				for(int j=0;j<y.length;j++){
////					if(gridData[i][j] >maxU)
////						maxU = gridData[i][j] ;
////					if(gridData[i][j] <minU)
////						minU = gridData[i][j] ;
////				}
////			}
////
////			//set griddata
////			grn_.setGridData(new DenseDoubleMatrix2D(gridData));
////			
////			//refresh figure
////			canvas.destroyImage();
////
////			LandscapeSurfaceModel model = new LandscapeSurfaceModel();
////			model.setXAxisLabel(axisX);
////			model.setYAxisLabel(axisY);
////			model.setZAxisLabel("Entropy");
////			float xmax = (float) ((int)(x[x.length-1]*100))/100;
////			float xmin = (float) ((int) (x[0]*100))/100;
////			
////			float ymax = (float) ((int)(y[y.length-1]*100))/100;
////			float ymin = (float) ((int) (y[0]*100))/100;
////			
////			float stepx = (float) (((int)((xmax-xmin)/grn_.getN()*100)))/100;
////			float stepy = (float) (((int)((ymax-ymin)/grn_.getN()*100)))/100;
////			
////			xmax = xmin + stepx*grn_.getN();
////			ymax = ymin + stepy*grn_.getN();
////			
////			double[] x1 = LandscapeView.increment(xmin, stepx, xmax);
////			double[] y1 = LandscapeView.increment(ymin, stepy, ymax);
//// 			
////			
////			model.setXMax((float) x1[x1.length-1]);			
////			model.setXMin((float) x1[0]);		
////			model.setYMax((float) y1[y1.length-1]);		
////			model.setYMin((float) y1[0]);
////			//maxU = (float) ((int) maxU*100)/100;
////			model.setZMax((float) maxU);
////			//minU = (float) ((int) minU*100)/100;
////			model.setZMin((float) minU);
////	
////			model.setStepSizeX(stepx);
////			model.setStepSizeY(stepy);
////			model.setGridData(gridData);
////			
////			canvas.setModel(model);
////			canvas.repaint();
////			
////			fTemp.deleteOnExit();
////			fTempout.deleteOnExit();
////		}
//			
//		
//	}
	
	
	
	private void readEntropyOutput(File fTempnew, double[][] gridData, int npoints) {		
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader(fTempnew));
            String tempString = null;

            tempString = reader.readLine();
            String temp[] = tempString.split(" ");
            
            System.out.print(temp.length+"\t"+npoints+"\t"+temp[32]+"\n");
            int counts = 0;
            for(int i=0;i<npoints;i++)
            	for(int j=0;j<npoints;j++){
            		if( temp[counts].equals("nan") ){
            			if( counts == 0 )
            				temp[counts] = "0";
            			else
            				temp[counts] = temp[counts-1];
            		}
            			
            		System.out.print(i+"\t"+j+"\t"+counts+"\t"+temp[counts].getClass().getName()+"\n");
            		gridData[i][j] = Double.parseDouble(temp[counts]);
            		counts++;
            	}
            
            
            while ((tempString = reader.readLine()) != null) {
            }
            
            reader.close();
            
        } catch (IOException e) {
        	JOptionPane.showMessageDialog(null, "Error in saving files!", "Error", JOptionPane.INFORMATION_MESSAGE);
        	MsgManager.Messages.errorMessage(e, "Error", "");
        } finally {
            if (reader != null) {
                try {
                    reader.close();            
                } catch (IOException e1) {
                	JOptionPane.showMessageDialog(null, "Error in saving files!", "Error", JOptionPane.INFORMATION_MESSAGE);
                	MsgManager.Messages.errorMessage(e1, "Error", "");
                }
            }
        }
    	
	}


	private void runNetworkEntropy(String temppath, String inputfile, String outputfile) {
		Runtime rn = Runtime.getRuntime();
		Process p = null;
		try {
//			//for standalone package
//			String programPath = getClass().getProtectionDomain().getCodeSource().getLocation().getPath();
//			programPath = programPath.replaceAll("^/", "");
//			programPath = programPath.replaceAll("\\/", "\\\\");	
//			programPath = programPath.substring(0, programPath.lastIndexOf("\\")+1)+"Entropy";
			
			//for ide
			String programPath = "./Entropy";			
			
            System.out.print("Run NetworkEntropy \n") ;
			
			p = rn.exec("cmd /c entropy.exe -i "+temppath+"\\"+inputfile+" -o "+temppath+"\\"+outputfile,null, new File(programPath));
			
			
			BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
			String msg = null;
			while ((msg = br.readLine()) != null) {
				System.out.println(msg);
			}
			
			int exitVal = p.waitFor();
//			System.out.println("Process exitValue: " + exitVal);
			
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Error in execution of entropy!", "Error", JOptionPane.INFORMATION_MESSAGE);
			MsgManager.Messages.errorMessage(e, "Error", "");
		}	
		
	}


	private int writeEntropy(URL filename, DoubleMatrix2D yout) {
		// Create a new SBMLDocument object, using SBML Level 1 Version 2.		
		try {
			FileWriter fw = new FileWriter(filename.getPath());
			
			fw.write(yout.rows()+" "+yout.columns()+"\n");

			//write trajectories rows*cols		
			for(int i=0;i<yout.rows();i++){
				fw.write(""+yout.get(i, 0));
				for(int j=1;j<yout.columns();j++)
					fw.write(" "+yout.get(i, j));
				fw.write("\n");
			}
			
			//write connectivity matrix
			GeneNetwork grn = ((DynamicalModelElement)item_).getGeneNetwork();
			int ngenes = grn.getNodes().size();
			ArrayList<Node> nodes = grn.getNodes();
			DoubleMatrix1D connMatrix = new DenseDoubleMatrix1D(ngenes*ngenes);
			int counts = 0;
			//set content 
			for(int i=0;i<ngenes;i++){
				Gene targetGene = (Gene) grn.getNode(i);
				
				ArrayList<Gene> inputGenes = ((Gene) targetGene).getInputGenes();
				for(int j=0;j<ngenes;j++){
					int flag = 0;
					for(int k=0;k<inputGenes.size();k++)
						if( inputGenes.get(k).getLabel().equals(nodes.get(j).getLabel()) ){
							connMatrix.set(counts, 1);
							flag = 1;
						}
					if( flag == 0 )
						connMatrix.set(counts, 0);
					counts++;
				}
			}//end of for
			
			//write to file
			fw.write(connMatrix.get(0)+"");
			for(int i=1;i<counts;i++)
				fw.write(" "+connMatrix.get(i));
			fw.write("\n");
			
			fw.close(); 
		} catch (IOException e1) {
			JOptionPane.showMessageDialog(null, "Cannot load the entropy_input file", "Error", JOptionPane.INFORMATION_MESSAGE);
			MsgManager.Messages.errorMessage(e1, "Error", "");
		}   


		return 0;
	}


}


