package Widgets;

import java.awt.Component;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.xml.stream.XMLStreamException;

import org.sbml.jsbml.SBMLException;
import org.sbml.jsbml.text.parser.ParseException;

import FileManager.FileChooser;
import LandscapeAnimation.LandscapePanel;
import LandscapeDisplay.JacobiMatrix;
import LandscapeDisplay.ODESolver;
import LandscapeDisplay.ODESolverTheta;
import LandscapeDisplay.SDESolver;
import LandscapeDisplay.SDETimeSeriesExperiment;
import LandscapeDisplay.nonlinearEq;
//import LandscapeDisplay.LandscapeSurfaceModel;
//import LandscapeDisplay.LandscapeView;
//import SurfacePlot.SurfaceCanvas;
import WidgetsButtons.TopButton;
import cern.colt.matrix.DoubleFactory2D;
import cern.colt.matrix.DoubleMatrix1D;
import cern.colt.matrix.DoubleMatrix2D;
import cern.colt.matrix.doublealgo.Statistic;
import cern.colt.matrix.doublealgo.Transform;
import cern.colt.matrix.impl.DenseDoubleMatrix1D;
import cern.colt.matrix.impl.DenseDoubleMatrix2D;
import cern.colt.matrix.linalg.Algebra;
import ch.epfl.lis.gnw.CancelException;
import ch.epfl.lis.gnw.Gene;
import ch.epfl.lis.gnw.GeneNetwork;
import ch.epfl.lis.gnw.GnwSettings;
import ch.epfl.lis.gnwgui.DynamicalModelElement;
import ch.epfl.lis.gnwgui.NetworkElement;
import ch.epfl.lis.networks.Node;
import edu.umbc.cs.maple.utils.ColtUtils;

public class CopyOfLandscape extends LandscapeWindow {
	private NetworkElement item_;
	private LandscapeThread landscape = null;
	
	public CopyOfLandscape(Frame aFrame, NetworkElement item) {
		super(aFrame);		
		item_ = item;
		
		//closing listener
		this.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent windowEvent){
				if( landscape != null && landscape.myThread_.isAlive() ){
					landscape.stop();	
					System.out.print("Simulation is canceled.");
					//JOptionPane.showMessageDialog(new Frame(), "Simulation is canceled.", "Warning!", JOptionPane.INFORMATION_MESSAGE);
				}
				escapeAction();
			}
		});

		//set core genenames
		final GeneNetwork grn = ((DynamicalModelElement) item_).getGeneNetwork();
		ArrayList<Node> nodes = grn.getNodes();
	

		String geneNames = "";
		for(int i=0;i<nodes.size();i++)
			geneNames += nodes.get(i).getLabel()+";";
		
		focusGenes.setText(geneNames);
		
		gpdmIts.setEnabled(false);
		
		
		//set plot part
		//display saved result
		if( grn.getGridData()!=null ){		
			//update parameters
			its.setText(grn.getLand_itsValue()+"");
			maxExp.setText(grn.getLand_maxExpValue()+"");
			maxT.setText(grn.getLand_maxTime()+"");
			
			geneNames = "";
			for(int i=0;i<grn.getLand_focusGenesList().length;i++)
				geneNames += grn.getLand_focusGenesList()[i]+";";
			
			focusGenes.setText(geneNames);

			if( grn.isLand_isTwoGenes() ){
				randioButton11.setSelected(true);
				randioButton31.setSelected(false);
			}else{
				randioButton11.setSelected(false);
				randioButton31.setSelected(true);
			}
			
			this.gpdmIts.setText(grn.getLand_gpdmitsValue()+"");
			
		}
		
		
		
		//button functions
		browse_.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent arg0) {
				try {
		            JFileChooser c = new FileChooser();
		            int result = c.showSaveDialog(new JFrame());
		            if(result == JFileChooser.APPROVE_OPTION){
		                c.approveSelection();
		                userPath_.setText(c.getSelectedFile().getAbsolutePath());
		            }
		        } catch (HeadlessException e) {
		            MsgManager.Messages.errorMessage(e, "Error", "Cannot create a new file!");
		        }	
			}
		});
		
		clear_.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent arg0) {
				userPath_.setText("");
			}
		});
		
		runButton_.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent arg0) {	
				String text = focusGenes.getText();
				text = text.replaceAll(" ","");
				String[] lines = text.split(";");			
				String[] focusGenes = new String[lines.length];
				for(int i=0;i<lines.length;i++){
					focusGenes[i] = lines[i];
				}
								
				enterAction(item_);
			}
		});

		cancelButton_.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent arg0) {
				if( landscape != null ){
					snake_.stop();
					myCardLayout_.show(runButtonAndSnakePanel_, runPanel_.getName());
					landscape.stop();
					System.out.print("Generation canceled!\n");
				}
			}
		});
		
//		randioButton3.addActionListener(new ActionListener() {
//			public void actionPerformed(final ActionEvent arg0) {
//				randioButton11.setEnabled(false);
//				randioButton31.setSelected(true);
//				randioButton11.setSelected(false);
//			}
//		});
		
		randioButton1.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent arg0) {
				randioButton11.setEnabled(true);
				randioButton31.setSelected(false);
				randioButton11.setSelected(true);
			}
		});
		
		randioButton11.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent arg0) {
				gpdmIts.setEnabled(false);
			}
		});
		
		randioButton31.addActionListener(new ActionListener() {
			public void actionPerformed(final ActionEvent arg0) {
				gpdmIts.setEnabled(true);
				//focusGenes.setEnabled(false);
			}
		});
	}
	
	
	public void enterAction(NetworkElement item) {
		try {
			
			//converted to dynamic model
			DynamicalModelElement grnItem = new DynamicalModelElement((DynamicalModelElement) item);	
			
			if( grnItem.getGeneNetwork().getNodes().size() <= 1 ){
				JOptionPane.showMessageDialog(null, "The system only contains "+grnItem.getGeneNetwork().getNodes().size()+" reaction! To plot the landscape, at least two kinetic reactions are required.", "Error", JOptionPane.INFORMATION_MESSAGE);
				return;
			}

			GnwSettings settings = GnwSettings.getInstance(); 				
			
			landscape = new LandscapeThread(grnItem);
			settings.stopBenchmarkGeneration(false); // reset
			
			// be sure to have set the output directory before running the simulation
			landscape.start();
		}
		catch (Exception e){
			JOptionPane.showMessageDialog(null, "Error in running Landscape!", "Error", JOptionPane.INFORMATION_MESSAGE);
			MsgManager.Messages.errorMessage(e, "Error", "");
		}

	}
	
	
	
	public class LandscapeThread implements Runnable {
		private GeneNetwork grn_;
		/** Main Thread */
		private Thread myThread_;
		private volatile boolean stopRequested;

		private DoubleMatrix2D sumPara;
		private int[] counts;
		//size is num attractors with indexes 
		private	ArrayList<int[]> labeledSeries;
		
		private double maxExpValue;
		private int itsValue;
		private int maxTime;
		private int numTimePoints;
		private String[] focusGenesList;
		private String outputPath;
		private String landscapeMethod;
		private boolean displayMethod = true; //default two markers
		private int gpdmItsValue;

//		Logger log_ = Logger.getLogger(TopButton.class.getName());
		
		// ============================================================================
		// PUBLIC METHODS
		public LandscapeThread(DynamicalModelElement grnItem)
		{
			super();
			myThread_ = null;
			stopRequested = false;
			
			grn_ = grnItem.getGeneNetwork();
			maxExpValue = Double.parseDouble(maxExp.getText());
			itsValue = Integer.parseInt(its.getText());
			maxTime = Integer.parseInt(maxT.getText());
			gpdmItsValue = Integer.parseInt(gpdmIts.getText());
			
			numTimePoints = (int) (maxTime*2+1);
			focusGenesList = focusGenes.getText().split(";");
			outputPath = userPath_.getText();
			if( randioButton1.isSelected() )
				landscapeMethod = "probabilistic";
			else
				landscapeMethod = "entropy";
			
			if( randioButton11.isSelected() )//select two markers
				displayMethod = true;
			else //gpdm
				displayMethod = false;				
			
		}

		// ----------------------------------------------------------------------------

		public void start() {
			// If myThread_ is null, we start it!
			if (myThread_ == null) {
				myThread_ = new Thread(this);
				stopRequested = false;
				myThread_.start();
			}
		}

		// ----------------------------------------------------------------------------

		public void stop(){
			stopRequested = true;

			if( myThread_ != null ){
				myThread_.interrupt();
				JOptionPane.showMessageDialog(new Frame(), "The program is interrupted!", "Cancel", JOptionPane.INFORMATION_MESSAGE);
			}
		}

		// ----------------------------------------------------------------------------

		public void run()
		{	
			snake_.start();
			myCardLayout_.show(runButtonAndSnakePanel_, snakePanel_.getName());
			
			Component c = snake_.getParent();
			while ( c.getParent() != null ){
				c = c.getParent();
			}

			if ( c instanceof JFrame )
			{
				try{		
					if( randioButton11.isSelected() )//select two markers
						System.out.print("Start to construct Landscape\n");
					else //gpdm
						System.out.print("Start to construct Landscape using GPDM\n");
					
					//construct landscape
					//DrawLandscape instance = new DrawLandscape((JFrame) c, grn_, maxExpValue, itsValue, maxTime, numTimePoints, focusGenesList, outputPath, landscapeMethod, displayMethod, gpdmItsValue);
					/** generate time series **/
					SDESolver deSolver_ = new SDESolver(grn_, true, 0);

					//random start values
					deSolver_.setOutputDirectory(System.getProperty("user.dir"));
					deSolver_.setNumSeries(itsValue); //foreach X0 runs once
					deSolver_.setMaxt(maxTime);
					deSolver_.setNumTimePoints(numTimePoints);
					deSolver_.setNoiseStrength(0);
					deSolver_.setIslandscape(true);

					double dt_ = maxTime*1.0 / (numTimePoints - 1) ;
					deSolver_.setDt(dt_);
					
					//run numSeries_ times
					ArrayList<SDETimeSeriesExperiment> tss = new ArrayList<SDETimeSeriesExperiment>();
					ArrayList<DoubleMatrix1D> timeScale = new ArrayList<DoubleMatrix1D>();	
					ArrayList<DoubleMatrix2D> timeSeries = new ArrayList<DoubleMatrix2D>();
					
					deSolver_.setTss(tss);
					deSolver_.setTimeScale(timeScale);
					deSolver_.setTimeSeries(timeSeries);
					
					int its = 0;
					while( !stopRequested && its<itsValue ){
						System.out.print("Trajectory no: "+its+"\n");
						try {
							deSolver_.solveEquations_landscape(maxExpValue, displayMethod);
						} catch (Exception e) {			
							JOptionPane.showMessageDialog(new Frame(), "Error in execution!", "Runtime exception", JOptionPane.INFORMATION_MESSAGE);
							MsgManager.Messages.errorMessage(e, "Runtime exception", "");
							this.stop();
						}
						its++;
					}
					
					
					int dimension = grn_.getNodes().size();	
					ArrayList<DoubleMatrix1D> theta = new ArrayList<DoubleMatrix1D>(dimension);		
					
					
					grn_.setDisplayMethod(landscapeMethod);
					
					
					boolean isStable = true;
					/** get attractors focusGenes=all **/
					if( !stopRequested ){	
						System.out.print("Calculate attractors...\n");
						if( !checkAttractor(focusGenesList, timeSeries, theta) ){
							isStable = false;
						}
					}
								
					
					/** calculate theta **/						
					if( !stopRequested ){
						for(int i=0;i<sumPara.rows();i++){
							ODESolverTheta deSolverTheta = new ODESolverTheta(grn_, maxTime);
						
							DoubleMatrix1D initialX0 = new DenseDoubleMatrix1D(grn_.getNodes().size()*2);
							for(int j=0;j<grn_.getNodes().size();j++)
								initialX0.set(j, sumPara.get(i, j));
							for(int j=grn_.getNodes().size();j<2*grn_.getNodes().size();j++)
								initialX0.set(j, 0.1);
							deSolverTheta.setInitialX0(initialX0);

							deSolverTheta.setIslandscape(false);
							deSolverTheta.setRandomInitial(false);
		
							//run numSeries_ times
							ArrayList<DoubleMatrix2D> timeSeriesTheta = new ArrayList<DoubleMatrix2D>();
							ArrayList<DoubleMatrix1D> timeScaleTheta = new ArrayList<DoubleMatrix1D>();		

							deSolverTheta.setTimeScale(timeScaleTheta);
							deSolverTheta.setTimeSeries(timeSeriesTheta);

							if( !stopRequested )
								deSolverTheta.solveEquations_ODE(); 
							
							theta.add(timeSeriesTheta.get(timeSeriesTheta.size()-1).viewRow(2));
						}
						
			
						//thetaTemp.assign(cern.jet.math.Functions.max(0.03));

						
					}
					//end of varation
					
					
					/** update figure **/
					if( !stopRequested ){	
						if( isStable ){
							/** draw landscape **/
							if( !stopRequested ){		
								System.out.print("Plot the landscape...\n");
								
								if( displayMethod ){ //two markers// not gpdm
									grn_.setCounts(counts);
									grn_.setSumPara(sumPara);
									grn_.setLand_isTwoGenes(true);

									grn_.setLand_maxTime(maxTime);
									grn_.setLand_itsValue(itsValue);
									grn_.setLand_maxExpValue(maxExpValue);
									grn_.setLand_focusGenesList(focusGenesList);
									grn_.setLand_gpdmitsValue(gpdmItsValue);

								}else if( !displayMethod ){//gpdm
									computeGPDMLand(timeSeries, theta);						
								}
							}

							if( !stopRequested ){	
								finalizeAfterSuccess();
								System.out.print("Done!\n");
							}
						}else{
							snake_.stop();
							myCardLayout_.show(runButtonAndSnakePanel_, runPanel_.getName());
							dispose();

							JOptionPane.showMessageDialog(new Frame(), "Cannot find a steady state.", "Warning", JOptionPane.INFORMATION_MESSAGE);
						}
					}
				
				
				}
				catch (OutOfMemoryError e)
				{
//					log_.log(Level.WARNING, "There is not enough memory available to run this program.\n" +
//							"Quit one or more programs, and then try again.\n" +
//							"If enough amounts of RAM are installed on this computer, try to run the program " +
//							"with the command-line argument -Xmx1024m to use maximum 1024Mb of memory, " +
//							"-Xmx2048m to use max 2048Mb, etc.");
					JOptionPane.showMessageDialog(new Frame(), "There is not enough memory available to run this program.\n" +
							"Quit one or more programs, and then try again.\n" +
							"If enough amounts of RAM are installed on this computer, try to run the program " +
							"with the command-line argument -Xmx1024m to use maximum 1024Mb of memory, " +
							"-Xmx2048m to use max 2048Mb, etc.", "Out of memory", JOptionPane.INFORMATION_MESSAGE);
					finalizeAfterFail();

				}
				catch (IllegalArgumentException e)
				{
					//log_.log(Level.WARNING, e.getMessage(), e);
					JOptionPane.showMessageDialog(new Frame(), "Illegal argument", "Error", JOptionPane.INFORMATION_MESSAGE);
					MsgManager.Messages.errorMessage(e, "Error", "");
					//log_.log(Level.INFO, "Potential orkaround: gene names must contain at least one char (e.g. \"5\" is not a valid gene name, but \"G5\" is)");
					finalizeAfterFail();
				}
			}
		}
		
		
		
		//---------------------------------------------------------------------------------------------------------------------------------
		private void computeGPDMLand(ArrayList<DoubleMatrix2D> timeSeries, ArrayList<DoubleMatrix1D> theta) {
			//calculate Ua
			int exitVal = -2;
			
			//first round of GPDM
			try {
				//write svml
				//input file
				String filename = "temp_"+System.currentTimeMillis();
				String temppath = System.getProperty("java.io.tmpdir");
				File f = new File(temppath);
				File fTemp = File.createTempFile(filename, ".svml", f);

				URL url = fTemp.toURI().toURL();
				if( !stopRequested )
					writeSVML(url,timeSeries,labeledSeries);		

				//output file
				String outputModelName = "temp_"+System.currentTimeMillis();
				File fout = new File(temppath);
				File fTempout = File.createTempFile(outputModelName, ".gpdm", fout);

				//run GPDM
				if( !stopRequested )
					exitVal = runGPDM(temppath,fTemp.getName(),fTempout.getName(),gpdmItsValue);

				if( exitVal == 0 ){
					//interpolate new points
					String outputNewPointName = "temp_"+System.currentTimeMillis();
					File fnew = new File(temppath);
					File fTempnew = File.createTempFile(outputNewPointName, ".ypred", fnew);

					if( !stopRequested )
						runMyGPDM(temppath, fTempout.getName(), fTempnew.getName());

					int nPerDim=31;
					//get new Y and new X
					DoubleMatrix2D allY = new DenseDoubleMatrix2D(nPerDim*nPerDim,grn_.getNodes().size());
					DoubleMatrix2D allX = new DenseDoubleMatrix2D(nPerDim*nPerDim,2); //numYorig+
					double minX=0, maxX=0, minY=0, maxY=0; int n=0;

					String tempString = getYandX(fTempnew, allY, allX);

					//System.out.print(tempString);
					String temp1[] = tempString.split("\t");
					maxX = Double.parseDouble(temp1[0]);
					minX = Double.parseDouble(temp1[1]);
					maxY = Double.parseDouble(temp1[2]);
					minY = Double.parseDouble(temp1[3]);
					n = Integer.parseInt(temp1[4]);
					

					grn_.setCounts(counts);
					grn_.setSumPara(sumPara);
					grn_.setMinX(minX);
					grn_.setMaxX(maxX);
					grn_.setMinY(minY);
					grn_.setMaxY(maxY);
					grn_.setN(n);
					grn_.setAllX(allX);
					grn_.setAllY(allY);
					grn_.setLand_isTwoGenes(false);

					fTemp.delete();
					fTempout.delete();
					fTempnew.delete();

					grn_.setLand_maxTime(maxTime);
					grn_.setLand_itsValue(itsValue);
					grn_.setLand_maxExpValue(maxExpValue);
					grn_.setLand_focusGenesList(focusGenesList);
					grn_.setLand_gpdmitsValue(gpdmItsValue);
					return;
				}//end of exitVal == 0 
			} catch (IOException e) {
				JOptionPane.showMessageDialog(new Frame(), "Cannot create a file!", "Error", JOptionPane.INFORMATION_MESSAGE);
				MsgManager.Messages.errorMessage(e, "Error", "");
				this.stop();
			}	
			
			
			//in case of "Matrix non positive definite error"
			while( exitVal == -2 ){ 
				//regenerate traj							
				/** generate time series **/
				SDESolver deSolver_ = new SDESolver(grn_, true, 0);

				//random start values
				deSolver_.setOutputDirectory(System.getProperty("user.dir"));
				deSolver_.setNumSeries(itsValue); //foreach X0 runs once
				deSolver_.setMaxt(maxTime);
				deSolver_.setNumTimePoints(numTimePoints);
				deSolver_.setNoiseStrength(0);
				deSolver_.setIslandscape(true);

				double dt_ = maxTime*1.0 / (numTimePoints - 1) ;
				deSolver_.setDt(dt_);
				
				//run numSeries_ times
				ArrayList<SDETimeSeriesExperiment> tss = new ArrayList<SDETimeSeriesExperiment>();
				ArrayList<DoubleMatrix1D> timeScale = new ArrayList<DoubleMatrix1D>();	
				timeSeries = new ArrayList<DoubleMatrix2D>();
				theta = new ArrayList<DoubleMatrix1D>();
				
				deSolver_.setTss(tss);
				deSolver_.setTimeScale(timeScale);
				deSolver_.setTimeSeries(timeSeries);
				
				int its = 0;
				while( !stopRequested && its<itsValue ){
					System.out.print("Trajectory no: "+its+"\n");
					try {
						deSolver_.solveEquations_landscape(maxExpValue, displayMethod);
					} catch (Exception e) {			
						JOptionPane.showMessageDialog(new Frame(), "Error in execution!", "Runtime exception", JOptionPane.INFORMATION_MESSAGE);
						MsgManager.Messages.errorMessage(e, "Runtime exception", "");
						this.stop();
					}
					its++;
				}
				
				
				try {
					//write svml
					//input file
					String filename = "temp_"+System.currentTimeMillis();
					String temppath = System.getProperty("java.io.tmpdir");
					File f = new File(temppath);
					File fTemp = File.createTempFile(filename, ".svml", f);

					URL url = fTemp.toURI().toURL();
					int numYorig = writeSVML(url,timeSeries,labeledSeries);		

					//output file
					String outputModelName = "temp_"+System.currentTimeMillis();
					File fout = new File(temppath);
					File fTempout = File.createTempFile(outputModelName, ".gpdm", fout);

					//run GPDM
					while( !stopRequested )
						exitVal = runGPDM(temppath,fTemp.getName(),fTempout.getName(),gpdmItsValue);

					if( exitVal == 0 ){
						//interpolate new points
						String outputNewPointName = "temp_"+System.currentTimeMillis();
						File fnew = new File(temppath);
						File fTempnew = File.createTempFile(outputNewPointName, ".ypred", fnew);

						while( !stopRequested )
							runMyGPDM(temppath, fTempout.getName(), fTempnew.getName());

						int nPerDim=31;
						//get new Y and new X
						DoubleMatrix2D allY = new DenseDoubleMatrix2D(nPerDim*nPerDim,grn_.getNodes().size());
						DoubleMatrix2D allX = new DenseDoubleMatrix2D(nPerDim*nPerDim,2); //numYorig+
						double minX=0, maxX=0, minY=0, maxY=0; int n=0;

						String tempString = getYandX(fTempnew, allY, allX);

						//System.out.print(tempString);
						String temp1[] = tempString.split("\t");
						maxX = Double.parseDouble(temp1[0]);
						minX = Double.parseDouble(temp1[1]);
						maxY = Double.parseDouble(temp1[2]);
						minY = Double.parseDouble(temp1[3]);
						n = Integer.parseInt(temp1[4]);


						grn_.setCounts(counts);
						grn_.setSumPara(sumPara);
						grn_.setMinX(minX);
						grn_.setMaxX(maxX);
						grn_.setMinY(minY);
						grn_.setMaxY(maxY);
						grn_.setN(n);
						grn_.setAllX(allX);
						grn_.setAllY(allY);
						grn_.setLand_isTwoGenes(false);

						fTemp.delete();
						fTempout.delete();
						fTempnew.delete();

						grn_.setLand_maxTime(maxTime);
						grn_.setLand_itsValue(itsValue);
						grn_.setLand_maxExpValue(maxExpValue);
						grn_.setLand_focusGenesList(focusGenesList);
						grn_.setLand_gpdmitsValue(gpdmItsValue);
						
						return;
					}//end of exitVal == 0
				} catch (IOException e) {
					JOptionPane.showMessageDialog(new Frame(), "Cannot create a file!", "Error", JOptionPane.INFORMATION_MESSAGE);
					MsgManager.Messages.errorMessage(e, "Error", "");
					this.stop();
				}		
			}//end of while
			
		}
		
		
		//run c++ GPDM
		public int runGPDM(String filePath, String filename, String outputModelName, int gpdmItsValue){	
			int exitVal = -1;

			Runtime rn = Runtime.getRuntime();
			Process p = null;
			try {
				//for standalone package
				String programPath = getClass().getProtectionDomain().getCodeSource().getLocation().getPath();	


				String os = System.getProperty("os.name");  		
				if(os.toLowerCase().startsWith("win")){   
					programPath = programPath.replaceAll("^/", "");
					programPath = programPath.replaceAll("\\/", "\\\\");	
					programPath = programPath.substring(0, programPath.lastIndexOf("\\")+1)+"GPDM\\win";
					programPath = programPath.replaceAll("%20"," ");
					p = rn.exec("cmd /C gplvm.exe -v 3 learn -L true -D rbf -# "+gpdmItsValue+" "+filePath+"\\"+filename+" "+filePath+"\\"+outputModelName,null, new File(programPath));
				}else if(os.toLowerCase().startsWith("linux")){ 
					p = rn.exec("./GPDM/linux/gplvm -v 3 learn -L true -D rbf -# "+gpdmItsValue+" "+filePath+"/"+filename+" "+filePath+"/"+outputModelName);
				}else if(os.toLowerCase().startsWith("mac")){ 
					//				programPath = programPath.substring(0, programPath.lastIndexOf("/")+1)+"GPDM/mac";
					//				programPath = programPath.replaceAll("%20","\" \"");
					p = rn.exec("./GPDM/mac/gplvm -v 3 learn -L true -D rbf -# "+gpdmItsValue+" "+filePath+"/"+filename+" "+filePath+"/"+outputModelName);
				}


//				//			//for ide
//				String programPath = "E:\\netland\\workspace\\NetLand\\GPDM\\win";			
//				p = rn.exec("cmd /C gplvm.exe -v 3 learn -L true -D rbf -# "+gpdmItsValue+" "+filePath+"\\"+filename+" "+filePath+"\\"+outputModelName,null, new File(programPath));
//	
//				System.out.print("Run GPDM \n"); //+programPath+"\n"+filePath+"\n"+outputModelName+"\n"


				BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
				String msg = null;
				while ((msg = br.readLine()) != null) {
					System.out.println(msg);
					if( msg.equals("Press enter for more.") ){
						p.destroy();
						return -2;
//						JOptionPane.showMessageDialog(null, "Please try again.", "Error in execution of GPDM!", JOptionPane.INFORMATION_MESSAGE);
//						return exitVal;
					}
					checkForInterruption_process(p);
				}

				exitVal = p.waitFor();

			} catch (Exception e) {		
				if( e.getMessage().equals("Generation canceled!") ){
					snake_.stop();
					myCardLayout_.show(runButtonAndSnakePanel_, runPanel_.getName());
					return -1;
				}else{
					snake_.stop();
					myCardLayout_.show(runButtonAndSnakePanel_, runPanel_.getName());
					stopRequested = true;
					JOptionPane.showMessageDialog(null, "Error in the execution of GPDM!", "Error", JOptionPane.INFORMATION_MESSAGE);
					MsgManager.Messages.errorMessage(e, "Error", "");
					System.out.print("Generation stopped!");
				}
			}
			
			return exitVal;	
		}
		
		
		private void checkForInterruption_process(Process p) throws CancelException {	
			if ( stopRequested ){ 
				p.destroy();
				throw new CancelException("Generation canceled!");
			}
		}
		
		//read Ypred Y and Xold Xnew from files
		private String getYandX(File fTempnew, DoubleMatrix2D allY, DoubleMatrix2D allX) {
			String paras = "";
			
			//get ogrinal Y and X
	        BufferedReader reader = null;
	        try {
	            reader = new BufferedReader(new FileReader(fTempnew));
	            String tempString = null;
	            //get minX maxX minY maxY
	            tempString = reader.readLine();
	            paras = tempString;
	            
	            int line = 0;
	            while ((tempString = reader.readLine()) != null) {
	            	String temp[] = tempString.split("\t");
	            	for(int i=0;i<allY.columns();i++)
	            		allY.set(line, i, Double.parseDouble(temp[i]));
	            	for(int i=allY.columns();i<temp.length;i++)
	            		allX.set(line, i-allY.columns(), Double.parseDouble(temp[i]));
	            	line++;
	            }
	            reader.close();
	            
	        } catch (IOException e) {
	        	JOptionPane.showMessageDialog(null, "Error in reading the file!", "Error", JOptionPane.INFORMATION_MESSAGE);
	        	MsgManager.Messages.errorMessage(e, "Error", "");
	        } finally {
	            if (reader != null) {
	                try {
	                    reader.close();                 
	                } catch (IOException e1) {
	                	JOptionPane.showMessageDialog(null, "Error in reading the file!", "Error", JOptionPane.INFORMATION_MESSAGE);
	                	MsgManager.Messages.errorMessage(e1, "Error", "");
	                }
	            }
	        }
	    	
	        return paras;
		}


		//from latent to orginal
		private int runMyGPDM(String filePath, String modelName, String outputName) {
			int exitVal = -1;
			
			Runtime rn = Runtime.getRuntime();
			Process p = null;
			try {
				//for standalone package
				String programPath = getClass().getProtectionDomain().getCodeSource().getLocation().getPath();	
									
				String os = System.getProperty("os.name");  
				if(os.toLowerCase().startsWith("win")){  
					programPath = programPath.replaceAll("^/", "");
					programPath = programPath.replaceAll("\\/", "\\\\");
					programPath = programPath.substring(0, programPath.lastIndexOf("\\")+1)+"GPDM\\win";
					programPath = programPath.replaceAll("%20"," ");
					p = rn.exec("cmd /c myGPLVM.exe -i "+filePath+"\\"+modelName+" -o "+filePath+"\\"+outputName,null, new File(programPath));
				}else if(os.toLowerCase().startsWith("linux")){ 
					p = rn.exec("./GPDM/linux/myGPLVM -i "+filePath+"/"+modelName+" -o "+filePath+"/"+outputName);
				}else if(os.toLowerCase().startsWith("mac")){ 
//					programPath = programPath.substring(0, programPath.lastIndexOf("/")+1)+"GPDM/mac";
//					programPath = programPath.replaceAll("%20","\" \"");
					p = rn.exec("./GPDM/mac/myGPLVM -i "+filePath+"/"+modelName+" -o "+filePath+"/"+outputName);
				}  
				
				
//				//for ide
//				String programPath = "E:\\netland\\workspace\\NetLand\\GPDM\\win";
//				p = rn.exec("cmd /c myGPLVM.exe -i "+filePath+"\\"+modelName+" -o "+filePath+"\\"+outputName,null, new File(programPath));
							
				
				//System.out.println("Run reverse mapping\n");
				checkForInterruption_process(p);
							
				exitVal = p.waitFor();
//				System.out.println("Process exitValue mygpdm: " + exitVal);
				
				
//				BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
//				String msg = null;
//				while ((msg = br.readLine()) != null) {
//					System.out.println(msg);
//				}
			} catch (Exception e) {
				snake_.stop();
				myCardLayout_.show(runButtonAndSnakePanel_, runPanel_.getName());
				stopRequested = true;
				JOptionPane.showMessageDialog(null, "Error in the execution of GPDM!", "Error", JOptionPane.INFORMATION_MESSAGE);
				MsgManager.Messages.errorMessage(e, "Error", "");		
			}	
			return exitVal;
		}
		
		public int writeSVML(URL filename, ArrayList<DoubleMatrix2D> timeSeries, ArrayList<int[]> labeledSeries) throws IOException{
			
			//cannot take all data
			//int n1 = its/30; total 30 trajectories are selected
			int n1 = 10; //default 10 traj per attractor
			
			// Create a new file	
			FileWriter fw = new FileWriter(filename.getPath());   


			//define the num of traj for each attractor; thus we should sample enough items from each attractor!!!
			int[] nTrajPerAttr = new int[counts.length];
			int minCounts = 1000000;
			for(int i=0;i<counts.length;i++)
				if( minCounts>counts[i] )
					minCounts = counts[i];
			
			if( minCounts>n1 )
				for(int i=0;i<counts.length;i++)
					nTrajPerAttr[i] = n1;
			else
				for(int i=0;i<counts.length;i++)
					if( counts[i]<n1 )
						nTrajPerAttr[i] = counts[i];
					else
						nTrajPerAttr[i] = n1;

			
			int lines = 0;
			//write trajectories
			for(int i=0;i<counts.length;i++){	
				for(int jj=0;jj<nTrajPerAttr[i];jj++){
					DoubleMatrix2D tempX0 =  timeSeries.get(labeledSeries.get(i)[jj]);	
					int len = tempX0.rows();
					int interval = len<100?1:len/10;
					int numItem = (len-1)/interval+1;
					
//					//take the last 10
//					for(int j=tempX0.rows()-10;j<tempX0.rows();j+=1){ //rows: time length
//						String temp = "0";
//						for(int k=1;k<=tempX0.columns();k++)
//							temp += " "+k+":"+tempX0.get(j, k-1);
//						fw.write(temp+"\n");
//						lines++;
//					}
					
					for(int j=0;j<tempX0.rows();j+=interval){ //rows: time length
						String temp = "0";
						for(int k=1;k<=tempX0.columns();k++)
							temp += " "+k+":"+tempX0.get(j, k-1);
						fw.write(temp+"\n");
						lines++;
					}
				}
			}
			
			//write origAllY
			DoubleMatrix2D origAllY = new DenseDoubleMatrix2D(lines, grn_.getNodes().size());
			lines = 0;
			for(int i=0;i<counts.length;i++){	
				for(int jj=0;jj<nTrajPerAttr[i];jj++){
					DoubleMatrix2D tempX0 =  timeSeries.get(labeledSeries.get(i)[jj]);	
					int len = tempX0.rows();
					int interval = len<100?1:len/10;
					int numItem = (len-1)/interval+1;
					
//					//take the last 10
//					for(int j=tempX0.rows()-10;j<tempX0.rows();j+=1){ //rows: time length
//						for(int k=1;k<=tempX0.columns();k++)
//							origAllY.set(lines, k-1, tempX0.get(j, k-1));
//						lines++;
//					}
					
					
					for(int j=0;j<tempX0.rows();j+=interval){
						for(int k=1;k<=tempX0.columns();k++)
							origAllY.set(lines, k-1, tempX0.get(j, k-1));
						lines++;
					}
				}
			}
			grn_.setOrigAllY(origAllY);
			
			fw.close();   

			return lines;
		}

		//-------------------------------------------------------------------------------------------------------------------------
		private boolean checkAttractor(String[] focusGenes, ArrayList<DoubleMatrix2D> timeSeries, ArrayList<DoubleMatrix1D> theta){
			//discrete the final state
			int dimension = grn_.getNodes().size();
			
			//get gene index
			int[] focus_index = new int[focusGenes.length];
			for(int j=0;j<focusGenes.length;j++)
				for(int i=0;i<dimension;i++)
					if( grn_.getNode(i).getLabel().equals(focusGenes[j]) )
						focus_index[j] = i;
			
			//double check distances between attractors	
			String out =  calculateDistances(timeSeries, focus_index, dimension, theta);
			
			if( out.equals("ok") ){						
				return true;
			}
			
			return false;
		}
		
		
		private String calculateDistances(ArrayList<DoubleMatrix2D> timeSeries, int[] focus_index, int dimension, ArrayList<DoubleMatrix1D> theta) {		
			//solver equations
			List<String> solverResults_focusgenes = new ArrayList<String>(itsValue);
			DoubleMatrix2D attractorTypes_focusgene = new DenseDoubleMatrix2D(itsValue, focus_index.length);
			ArrayList<DoubleMatrix1D> attractorTypesAll = new ArrayList<DoubleMatrix1D>(itsValue);
			
			//java.text.DecimalFormat df = new java.text.DecimalFormat("#.00");  
			int i = 0;
			while( !stopRequested && i<itsValue ){	
				DoubleMatrix1D tempX0 =  timeSeries.get(i).viewRow(timeSeries.get(i).rows()-1);
			
				nonlinearEq a = new nonlinearEq(grn_);
				DoubleMatrix1D tempY = a.runSolver(tempX0,grn_);	
				if( tempY == null ) return "notStable";
				
				//judge if the stable state is far from the end position
				cern.jet.math.Functions F = cern.jet.math.Functions.functions;	
				double dis = tempX0.aggregate(tempY, F.plus, F.chain(F.square,F.minus));
				if( dis>500 ) return tempY.toString(); ////ad hoc	
				
				attractorTypesAll.add(tempY);

				String temp1 = "";
				for(int j=0;j<focus_index.length;j++){				
					double temp = Math.floor(100*tempY.get(focus_index[j]))/100;
					temp1 += temp+";" ;
					attractorTypes_focusgene.set(i, j, Math.abs(temp));
				}
				solverResults_focusgenes.add(temp1);
				
				i++;
			}
			
			//distance matrix
			double threshold = 0.1; //0.05 hahahaha
			ArrayList<Integer> output = calculateDisMatrix(attractorTypes_focusgene, threshold);
			
			Collections.sort(output);
			//remove i or j
			for(i=output.size()-1;i>=0;i--){
				solverResults_focusgenes.remove((int)output.get(i));
				attractorTypes_focusgene = ColtUtils.deleteRow(attractorTypes_focusgene, output.get(i));
			}
			
			//remove duplicates
			List<String> uniqueList_focusgene = new ArrayList<String>(new HashSet<String>(solverResults_focusgenes));
			
			//calculate para
			sumPara = new DenseDoubleMatrix2D( uniqueList_focusgene.size(), dimension*2);
			counts = new int[uniqueList_focusgene.size()];
			labeledSeries = new ArrayList<int[]>(uniqueList_focusgene.size());
			sumPara.assign(0);
				
			int temp[][] = new int[counts.length][itsValue];
			cern.jet.math.Functions F = cern.jet.math.Functions.functions;	
			for(i=0;i<itsValue;i++){
				DoubleMatrix1D tempX0 =  timeSeries.get(i).viewRow(timeSeries.get(i).rows()-1);
		
				//generate current vector
				DoubleMatrix1D temp1 = new DenseDoubleMatrix1D(focus_index.length);
				for(int j=0;j<focus_index.length;j++)
					temp1.set(j, Math.floor(100*tempX0.get(focus_index[j]))/100);
			
				//close to which attractor
				double[] tempSum = new double[sumPara.rows()]; 
				for(int k=0;k<uniqueList_focusgene.size();k++)
					tempSum[k] =  temp1.aggregate(attractorTypes_focusgene.viewRow(k), F.plus, F.chain(F.square,F.minus));
					
				
				//find the minimal distance
				int flag = -1; double minimal = 100000;
				for(int j=0;j<tempSum.length;j++)
					if(tempSum[j]<minimal){flag=j;minimal=tempSum[j];}
				
				counts[flag] += 1;
				temp[flag][counts[flag]-1] = i;
						
				for(int j=0;j<dimension;j++)
					sumPara.set(flag, j, sumPara.get(flag, j) + tempX0.get(j));
				
				for(int j=dimension;j<2*dimension;j++)
					sumPara.set(flag, j, sumPara.get(flag, j) + theta.get(i).get(j-dimension));
			}
			//-------------------
			
			for(i=0;i<counts.length;i++)
				labeledSeries.add(temp[i]);
			
			for(int j=0;j<uniqueList_focusgene.size();j++)
				Transform.div(sumPara.viewRow(j), counts[j]);
			
			return "ok";
		}
		
		
		// ----------------------------------------------------------------------------

		public void finalizeAfterSuccess() 
		{
			snake_.stop();
			myCardLayout_.show(runButtonAndSnakePanel_, runPanel_.getName());
			dispose();
			
			LandscapePanel onea = new LandscapePanel(grn_, displayMethod);	
			
			if( !outputPath.isEmpty() )
				saveLand();
		
		}

		private void saveLand(){
			//first part: SBML
			grn_.setId("NetLand_"+grn_.getId());
			String outputNewPointName = "temp_"+System.currentTimeMillis();
			String temppath = System.getProperty("java.io.tmpdir");
			File fnew = new File(temppath);

			try {
				File fTempnew = File.createTempFile(outputNewPointName, ".sbml", fnew);			
				URL url = fTempnew.toURI().toURL();
				grn_.writeSBML(url);	
				
				//second part: land info	
				String outputNewPointName1 = "temp_"+System.currentTimeMillis();
				String temppath1 = System.getProperty("java.io.tmpdir");
				File fnew1 = new File(temppath1);
				File fTempnew1 = File.createTempFile(outputNewPointName1, ".landscape", fnew1);
				FileWriter fw = new FileWriter(fTempnew1.getPath(), false);

				fw.write("\n\nLand\t"+grn_.getMaxX()+"\t"+grn_.getMinX()+"\t"+grn_.getMaxY()+"\t"+grn_.getMinY()+"\n");
				

				//write parameters
				fw.write(grn_.getSize()+"\t"+maxExpValue+"\t"+itsValue+"\t"+maxTime+"\t"+displayMethod+"\t"+gpdmIts.getText()+"\n");
				
				for(int i=0;i<focusGenesList.length;i++)
					fw.write(focusGenesList[i]+"\t");
				fw.write("\n");
				
				//write x
				for(int i=0;i<grn_.getX().size();i++)
					fw.write(grn_.getX().get(i)+"\t");
				fw.write("\n");
				
				//write y
				for(int i=0;i<grn_.getY().size();i++)
					fw.write(grn_.getY().get(i)+"\t");
				fw.write("\n");
				
				//write counts
				for(int i=0;i<grn_.getCounts().length;i++)
					fw.write(grn_.getCounts()[i]+"\t");
				fw.write("\n");
				
				
				//write sumpara
				for(int i=0;i<grn_.getSumPara().rows();i++){
					for(int j=0;j<grn_.getSumPara().columns();j++)
						fw.write(grn_.getSumPara().get(i,j)+"\t");
					fw.write("\n");
				}
				
				//write allY for gpdm				
				if( !displayMethod ){//only for gpdm
					fw.write(grn_.getAllY().rows()+"\t"+grn_.getAllY().columns()+"\n");
					
					for(int i=0;i<grn_.getAllY().rows();i++){
						for(int j=0;j<grn_.getAllY().columns();j++)
							fw.write(grn_.getAllY().get(i, j)+"\t");
						fw.write("\n");
					}
				}
				
				
				//write size of griddata
				fw.write(grn_.getGridData().rows()+"\t"+grn_.getGridData().columns()+"\n");
				
				//write griddata
				for(int i=0;i<grn_.getGridData().rows();i++){
					for(int j=0;j<grn_.getGridData().columns();j++)
						fw.write(grn_.getGridData().get(i, j)+"\t");
					fw.write("\n");
				}
				
				if( !displayMethod ){
					//write origAllY
					fw.write(grn_.getOrigAllY().rows()+"\t"+grn_.getOrigAllY().columns()+"\n");

					for(int i=0;i<grn_.getOrigAllY().rows();i++){
						for(int j=0;j<grn_.getOrigAllY().columns();j++)
							fw.write(grn_.getOrigAllY().get(i, j)+"\t");
						fw.write("\n");
					}
				}
				
				fw.close();
				
				//merge
				String output = outputPath;
				mergeFiles(output, new String[]{fTempnew.getAbsolutePath(), fTempnew1.getAbsolutePath()});
				
				fTempnew.delete();
				fTempnew1.delete();
				
				System.out.print("Save the landsacpe to "+outputPath+"\n");
			} catch (IOException e1) {
				JOptionPane.showMessageDialog(null,  "Cannot create a new file!", "Error", JOptionPane.INFORMATION_MESSAGE);
				MsgManager.Messages.errorMessage(e1, "Error", "");
			} catch (SBMLException e) {
				JOptionPane.showMessageDialog(null, "Cannot write file!", "Error", JOptionPane.INFORMATION_MESSAGE);
				MsgManager.Messages.errorMessage(e, "Error", "");
			} catch (XMLStreamException e) {
				JOptionPane.showMessageDialog(null,  "Invalid format!", "Error", JOptionPane.INFORMATION_MESSAGE);
				MsgManager.Messages.errorMessage(e, "Error", "");
			} catch (ParseException e) {
				JOptionPane.showMessageDialog(null,  "Error in parsing the file!", "Error", JOptionPane.INFORMATION_MESSAGE);
				MsgManager.Messages.errorMessage(e, "Error", "");
			}
			
			
		}
		
		// ----------------------------------------------------------------------------

		public void finalizeAfterFail()
		{
			snake_.stop();
			myCardLayout_.show(runButtonAndSnakePanel_, runPanel_.getName());
			//escapeAction(); // close the simulation window
		}

		public String getOutputPath() {
			return outputPath;
		}

		public void setOutputPath(String outputPath) {
			this.outputPath = outputPath;
		}
		
		public void mergeFiles(String outFile, String[] files) {  
	        FileChannel outChannel = null;  
	        int BUFSIZE = 1024 * 8;
	        
	        try {  
	            outChannel = new FileOutputStream(outFile).getChannel();  
	            for(String f : files){  
	                FileChannel fc = new FileInputStream(f).getChannel();   
	                ByteBuffer bb = ByteBuffer.allocate(BUFSIZE);  
	                while(fc.read(bb) != -1){  
	                    bb.flip();  
	                    outChannel.write(bb);  
	                    bb.clear();  
	                }  
	                fc.close();  
	            }  
	        } catch (IOException ioe) {  
	        	JOptionPane.showMessageDialog(null, "Cannot merge two files!", "Error", JOptionPane.INFORMATION_MESSAGE);
	        	MsgManager.Messages.errorMessage(ioe, "Error", "");
	        } finally {  
	            try {if (outChannel != null) {outChannel.close();}}
	            catch (IOException ignore) {
	            	JOptionPane.showMessageDialog(null, "Cannot merge two files!", "Error", JOptionPane.INFORMATION_MESSAGE);
	            	MsgManager.Messages.errorMessage(ignore, "Error", "");
	            }  
	        }  
	    }  
		
	}
	
	
	public static ArrayList<Integer> calculateDisMatrix(DoubleMatrix2D matrix, double threshold) {
		ArrayList<Integer> output = new ArrayList<Integer>();
		matrix = ColtUtils.transpose(matrix);
		DoubleMatrix2D a = Statistic.distance(matrix, Statistic.EUCLID);
				
		for(int i=0;i<a.rows()-1;i++)
			for(int j=i+1;j<a.columns();j++)
				if( a.get(i, j)<threshold ){
					if( !output.contains(j) )
						output.add(j);
				}
		
		return output;
	}

	
	//display the landscape
//	public JPanel landscapeTabb_loadsavedLandscape(final NetworkElement item) {	
//		/** first Tab: Landscape **/
//		boolean displayMethod = true;
//		if( randioButton11.isSelected() )//select two markers
//			displayMethod = true;
//		else //gpdm
//			displayMethod = false;			
//
//		//two comboboxes
//		//generate geneList
//		GeneNetwork grn = ((DynamicalModelElement) item).getGeneNetwork();
//		String[] geneList = new String[grn.getNodes().size()];
//		for(int i=0;i<grn.getNodes().size();i++)
//			geneList[i] = grn.getNodes().get(i).getLabel();
//
//		JPanel bottomPanel = new JPanel();
//
//		//get displayMethod: probabilistic, gpdm, entropy
//		String landscapeMethod = grn.getDisplayMethod();
//		if( landscapeMethod.equals("probabilistic") && displayMethod ){
//			//add two combo
//			final JComboBox<String> combo1=new JComboBox<String>(geneList);
//			combo1.setBorder(BorderFactory.createTitledBorder("X-axis"));
//			final JComboBox<String> combo2=new JComboBox<String>(geneList);
//			combo2.setSelectedIndex(0);
//			combo2.setBorder(BorderFactory.createTitledBorder("Y-axis"));   
//
//			//combo actions
//			combo1.addActionListener(new ActionListener(){
//				public void actionPerformed(ActionEvent e) {
//					if(item instanceof StructureElement)
//						JOptionPane.showMessageDialog(null, "Not dynamic Model!Run simulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//					else if(item instanceof DynamicalModelElement){
//						GeneNetwork grn = ((DynamicalModelElement)item).getGeneNetwork();
//
//						if(grn.getCounts().length<=0){
//							//								JOptionPane.showMessageDialog(null, "Run LandscapeSimulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//						}else{
//							int indexX = combo1.getSelectedIndex();
//							int indexY = combo2.getSelectedIndex();
//							String axisX = (String) combo1.getSelectedItem();
//							String axisY = (String) combo2.getSelectedItem();
//
//							//get Jframe
//							try {
//								generateFigure(landViewPanel, grn, indexX, indexY, axisX, axisY);
//							} catch (IOException e1) {
//								JOptionPane.showMessageDialog(null, e1.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
//							}
//						}
//					}
//				}
//			});
//
//			combo2.addActionListener(new ActionListener(){
//				public void actionPerformed(ActionEvent e) {
//					if(item instanceof StructureElement)
//						JOptionPane.showMessageDialog(null, "Not dynamic Model!Run simulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//					else if(item instanceof DynamicalModelElement){
//						GeneNetwork grn = ((DynamicalModelElement)item).getGeneNetwork();
//
//						if(grn.getCounts().length<=0){
//							//								JOptionPane.showMessageDialog(null, "Run LandscapeSimulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//						}else{
//							int indexX = combo1.getSelectedIndex();
//							int indexY = combo2.getSelectedIndex();
//							String axisX = (String) combo1.getSelectedItem();
//							String axisY = (String) combo2.getSelectedItem();
//
//							//get Jframe
//							try {
//								generateFigure(landViewPanel, grn, indexX, indexY, axisX, axisY);
//							} catch (IOException e1) {
//								JOptionPane.showMessageDialog(null, e1.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
//							}
//						}
//					}
//				}
//			});
//
//			if(grn.getCounts()==null){
//				JOptionPane.showMessageDialog(null, "Cannot load Landscape!", "Error", JOptionPane.INFORMATION_MESSAGE);
//			}else{
//				int indexX = combo1.getSelectedIndex();
//				int indexY = combo2.getSelectedIndex();
//				String axisX = (String) combo1.getSelectedItem();
//				String axisY = (String) combo2.getSelectedItem();
//
//				//get Jframe
//				try {
//					generateFigure_loadLand(landViewPanel, grn, indexX, indexY, axisX, axisY);
//				} catch (IOException e1) {
//					JOptionPane.showMessageDialog(null, e1.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
//				}
//			}
//
//
//			//set layout
//			bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.X_AXIS));
//			combo1.setBackground(Color.white);
//			combo2.setBackground(Color.white);
//			bottomPanel.add(combo1);
//			bottomPanel.add(combo2);
//
//		}else if( landscapeMethod.equals("probabilistic") && !displayMethod ){
//			//LandscapeView			
//			if(grn.getCounts()==null)
//				JOptionPane.showMessageDialog(null, "Cannot load Landscape!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//			else
//				try {
//					generateFigure_loadLand(landViewPanel, grn, -1, -1, "Component1", "Component2");
//				} catch (IOException e) {
//					JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
//				}
//
//			//set layout
//			bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.X_AXIS));		
//		}
//
//		JPanel LandPanel = new JPanel();
//		LandPanel.setLayout(new GridBagLayout());
//		NetLand.addComponent(LandPanel, landViewPanel.getCanvas(), 0, 0, 1, 1, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, 0, 1);
//		NetLand.addComponent(LandPanel, bottomPanel, 0, 1, 1, 1, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, 1, 0);
//
//		return LandPanel;
//	}
	
//	public void generateFigure_loadLand(LandscapeView landViewPanel, GeneNetwork grn_, int indexX, int indexY, String axisX, String axisY) throws IOException{
//		SurfaceCanvas canvas = landViewPanel.getCanvas();	
//		
//		
//		//draw selection two genes
//		if( indexX != -1 && indexX != -2 ){
//			double stepSize = 0.1; 
//			double[] x = grn_.getX().toArray();
//			double[] y = grn_.getY().toArray();
//			
//			double[][] gridData = grn_.getGridData().toArray();			
//
//			double maxU = 0; double minU = 100000;
//			for(int i=0;i<x.length;i++)
//				for(int j=0;j<y.length;j++){
//					if( gridData[i][j]<minU )
//						minU = gridData[i][j];
//					if( gridData[i][j]>maxU )
//						maxU = gridData[i][j];
//				}
//			
//			//refresh figure
//			canvas.destroyImage();
//			
//			LandscapeSurfaceModel model = new LandscapeSurfaceModel();
//			model.setXAxisLabel(axisX);
//			model.setYAxisLabel(axisY);
//			model.setZAxisLabel("U");
//			model.setXMax(x[x.length-1]);
//			model.setXMin(x[0]);
//			model.setYMax(y[y.length-1]);
//			model.setYMin(y[0]);
//			model.setZMax(maxU);
//			model.setZMin(minU);
//			model.setStepSizeX(stepSize);
//			model.setStepSizeY(stepSize);
//			model.setGridData(gridData);
//			model.setGPDM(false);
//			
//			canvas.setModel(model);
//			canvas.repaint();
//		}
//		//draw gpdm
//		else if( indexX == -1 ){			
//			double[][] gridData = grn_.getGridData().toArray();			
//
//			double maxU = 0; double minU = 100000;
//			int rowsGriddata = gridData.length;
//			for(int i=0;i<rowsGriddata;i++)
//				for(int j=0;j<rowsGriddata;j++){
//					if( gridData[i][j]<minU )
//						minU = gridData[i][j];
//					if( gridData[i][j]>maxU )
//						maxU = gridData[i][j];
//				}
//			
//			//refresh figure
//			canvas.destroyImage();
//			
//			LandscapeSurfaceModel model = new LandscapeSurfaceModel();
//			model.setXAxisLabel(axisX);
//			model.setYAxisLabel(axisY);
//			model.setZAxisLabel("U");
//			double xmax = grn_.getMaxX();
//			double xmin = grn_.getMinX();
//			
//			double ymax = grn_.getMaxY();
//			double ymin = grn_.getMinY();
//			
//			double stepx = (xmax-xmin)/(rowsGriddata-1);
//			double stepy = (ymax-ymin)/(rowsGriddata-1);
//			
//			xmax = xmin + stepx*30;
//			ymax = ymin + stepy*30;
//			
//			double[] x1 = LandscapeView.increment(xmin, stepx, xmax);
//			double[] y1 = LandscapeView.increment(ymin, stepy, ymax);
// 			
//			
//			
//			model.setXMax(x1[x1.length-1]);			
//			model.setXMin(x1[0]);		
//			model.setYMax(y1[y1.length-1]);		
//			model.setYMin(y1[0]);
//			model.setZMax(maxU);
//			model.setZMin(minU);
//		
//	
////			grn_.setMaxX((float) x1[x1.length-1]);
////			grn_.setMinX((float) x1[0]);
////			grn_.setMaxY((float) y1[y1.length-1]);
////			grn_.setMinY((float) y1[0]);
////			grn_.setX(new DenseDoubleMatrix1D(x1));
////			grn_.setY(new DenseDoubleMatrix1D(y1));
//			
//			model.setStepSizeX(stepx);
//			model.setStepSizeY(stepy);
//			model.setGridData(gridData);
//			model.setGPDM(true);
//			
//			canvas.setModel(model);
//			canvas.repaint();
//			
//		}//end of else gpdm		
//		
//	}
	
	
	//display the landscape
//	public JPanel landscapeTabb(final NetworkElement item) throws IOException{	
//		/** first Tab: Landscape **/
//		boolean displayMethod = true;
//		if( randioButton11.isSelected() )//select two markers
//			displayMethod = true;
//		else //gpdm
//			displayMethod = false;			
//		
//		//two comboboxes
//		//generate geneList
//		GeneNetwork grn = ((DynamicalModelElement) item).getGeneNetwork();
//		String[] geneList = new String[grn.getNodes().size()];
//		for(int i=0;i<grn.getNodes().size();i++)
//			geneList[i] = grn.getNodes().get(i).getLabel();
//		
//		JPanel bottomPanel = new JPanel();
//		
//		//get displayMethod: probabilistic, gpdm, entropy
//		String landscapeMethod = grn.getDisplayMethod();
//		if( landscapeMethod.equals("probabilistic") && displayMethod ){
//			//add two combo
//			final JComboBox<String> combo1=new JComboBox<String>(geneList);
//			combo1.setBorder(BorderFactory.createTitledBorder("X-axis"));
//			final JComboBox<String> combo2=new JComboBox<String>(geneList);
//			combo2.setSelectedIndex(0);
//			combo2.setBorder(BorderFactory.createTitledBorder("Y-axis"));   
//
//			//combo actions
//			combo1.addActionListener(new ActionListener(){
//				public void actionPerformed(ActionEvent e) {
//					if(item instanceof StructureElement)
//						JOptionPane.showMessageDialog(null, "Not dynamic Model!Run simulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//					else if(item instanceof DynamicalModelElement){
//						GeneNetwork grn = ((DynamicalModelElement)item).getGeneNetwork();
//
//						if(grn.getCounts().length<=0){
////							JOptionPane.showMessageDialog(null, "Run LandscapeSimulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//						}else{
//							int indexX = combo1.getSelectedIndex();
//							int indexY = combo2.getSelectedIndex();
//							String axisX = (String) combo1.getSelectedItem();
//							String axisY = (String) combo2.getSelectedItem();
//
//							//get Jframe
//							try {
//								generateFigure(landViewPanel, grn, indexX, indexY, axisX, axisY);
//							} catch (IOException e1) {
//								JOptionPane.showMessageDialog(null, e1.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
//							}
//						}
//					}
//				}
//			});
//
//			combo2.addActionListener(new ActionListener(){
//				public void actionPerformed(ActionEvent e) {
//					if(item instanceof StructureElement)
//						JOptionPane.showMessageDialog(null, "Not dynamic Model!Run simulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//					else if(item instanceof DynamicalModelElement){
//						GeneNetwork grn = ((DynamicalModelElement)item).getGeneNetwork();
//
//						if(grn.getCounts().length<=0){
////							JOptionPane.showMessageDialog(null, "Run LandscapeSimulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//						}else{
//							int indexX = combo1.getSelectedIndex();
//							int indexY = combo2.getSelectedIndex();
//							String axisX = (String) combo1.getSelectedItem();
//							String axisY = (String) combo2.getSelectedItem();
//
//							//get Jframe
//							try {
//								generateFigure(landViewPanel, grn, indexX, indexY, axisX, axisY);
//							} catch (IOException e1) {
//								JOptionPane.showMessageDialog(null, e1.getMessage(), "Error", JOptionPane.INFORMATION_MESSAGE);
//							}
//						}
//					}
//				}
//			});
//		
//			if(grn.getCounts()==null){
//				//				JOptionPane.showMessageDialog(null, "Run LandscapeSimulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//			}else{
//				int flag = 0;
////				for(int k1=0;k1<grn.getCounts().length;k1++){
////					if(grn.getCounts()[k1]==0){
////						JOptionPane.showMessageDialog(null, "Attractor"+(k1+1)+" is not found!", "Error", JOptionPane.INFORMATION_MESSAGE);
////						flag = 1;
////					}
////				}
//			
//				if( flag == 0 ){
//					int indexX = combo1.getSelectedIndex();
//					int indexY = combo2.getSelectedIndex();
//					String axisX = (String) combo1.getSelectedItem();
//					String axisY = (String) combo2.getSelectedItem();
//
//					//get Jframe
//					generateFigure(landViewPanel, grn, indexX, indexY, axisX, axisY);
//				}
//			}
//				
//		
//			//set layout
//			bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.X_AXIS));
//			combo1.setBackground(Color.white);
//			combo2.setBackground(Color.white);
//			bottomPanel.add(combo1);
//			bottomPanel.add(combo2);
//			
//		}else if( landscapeMethod.equals("probabilistic") && !displayMethod ){
//			//LandscapeView			
//			if(grn.getCounts()==null){
//				//				JOptionPane.showMessageDialog(null, "Run LandscapeSimulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//			}else{
//				int flag = 0;
////				for(int k1=0;k1<grn.getCounts().length;k1++){
////					if(grn.getCounts()[k1]==0){
////						JOptionPane.showMessageDialog(null, "Attractor"+(k1+1)+" is not found!", "Error", JOptionPane.INFORMATION_MESSAGE);
////						flag = 1;
////					}
////				}
//			
//				if( flag == 0 ){
//					//get Jframe
//					generateFigure(landViewPanel, grn, -1, -1, "Component1", "Component2");
//				}
//			}
//				
//		
//			//set layout
//			bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.X_AXIS));		
//		}else if( landscapeMethod.equals("entropy") && !displayMethod ){
//			//LandscapeView			
//			if(grn.getCounts()==null){
//				//				JOptionPane.showMessageDialog(null, "Run LandscapeSimulation first!", "Warning", JOptionPane.INFORMATION_MESSAGE);
//			}else{
//				int flag = 0;
////				for(int k1=0;k1<grn.getCounts().length;k1++){
////					if(grn.getCounts()[k1]==0){
////						JOptionPane.showMessageDialog(null, "Attractor"+(k1+1)+" is not found!", "Error", JOptionPane.INFORMATION_MESSAGE);
////						flag = 1;
////					}
////				}
//			
//				if( flag == 0 ){
//					//get Jframe
//					generateFigure(landViewPanel, grn, -2, -2, "Component1", "Component2");
//				}
//			}
//				
//		
//			//set layout
//			bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.X_AXIS));	
//		}
//
//		
//		JPanel LandPanel = new JPanel();
//		LandPanel.setLayout(new GridBagLayout());
//		NetLand.addComponent(LandPanel, landViewPanel.getCanvas(), 0, 0, 1, 1, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, 0, 1);
//		NetLand.addComponent(LandPanel, bottomPanel, 0, 1, 1, 1, GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH, 1, 0);
//	
//		return LandPanel;
//	}
//
//	public void generateFigure(LandscapeView landViewPanel, GeneNetwork grn_, int indexX, int indexY, String axisX, String axisY) throws IOException{
//		SurfaceCanvas canvas = landViewPanel.getCanvas();	
//		
//		//get its
//		int its = 0;
//		
//		for(int k1=0;k1<grn_.getCounts().length;k1++)
//			its += grn_.getCounts()[k1];
//	
//
//		int n = grn_.getSize();
//		double maxU = 0; double minU = 100000;
//		
//		
//		//draw selection two genes
//		if( indexX != -1 && indexX != -2 ){
//			double stepSize = 0.1; 
//			double[] x = LandscapeView.increment(0.0, stepSize, grn_.getLand_maxExpValue());
//			double[] y = LandscapeView.increment(0.0, stepSize,  grn_.getLand_maxExpValue());
//			
//			double[][] gridData = new double[x.length][y.length];	
//			
//			for(int i=0;i<x.length;i++){
//				for(int j=0;j<y.length;j++){
//					double u = 0;
//					//all types
//					for(int k1=0;k1<grn_.getSumPara().rows();k1++){
//						double u1 = Math.exp(-1.0*Math.pow((x[i]-grn_.getSumPara().get(k1, indexX)), 2)/2.0/grn_.getSumPara().get(k1, indexX+n))/grn_.getSumPara().get(k1, indexX+n)/Math.sqrt(2.0*Math.PI);
//						double u2 = Math.exp(-1.0*Math.pow((y[j]-grn_.getSumPara().get(k1, indexY)), 2)/2.0/grn_.getSumPara().get(k1, indexY+n))/grn_.getSumPara().get(k1, indexY+n)/Math.sqrt(2.0*Math.PI);
//						u += u1*u2*grn_.getCounts()[k1]/((double)its);
//					}
//					
//					double up = -1.0*Math.log(u);
//					if( up>100 )
//						up=100;
//
//					gridData[i][j] = up;
//
//
//					if(gridData[i][j] >maxU)
//						maxU = gridData[i][j] ;
//					if(gridData[i][j] <minU)
//						minU = gridData[i][j] ;
//				}
//			}
//			
//			//set grn
//			grn_.setX(new DenseDoubleMatrix1D(x));
//			grn_.setY(new DenseDoubleMatrix1D(y));
//			grn_.setGridData(new DenseDoubleMatrix2D(gridData));
//			
//			double xMax = x[0];
//			double xMin = x[0];
//			for(int i=1;i<x.length;i++){
//				if( xMax<x[i] )
//					xMax = x[i];
//				if( xMin>x[i] )
//					xMin = x[i];
//			}
//			
//			double yMax = y[0];
//			double yMin = y[0];
//			for(int i=1;i<y.length;i++){
//				if( yMax<y[i] )
//					yMax = y[i];
//				if( yMin>y[i] )
//					yMin = y[i];
//			}
//			
//			grn_.setMaxX(xMax);
//			grn_.setMinX(xMin);
//			grn_.setMaxY(yMax);
//			grn_.setMinY(yMin);
//			grn_.setN(x.length-1);
//			
//			//refresh figure
//			canvas.destroyImage();
//			
//			LandscapeSurfaceModel model = new LandscapeSurfaceModel();
//			model.setXAxisLabel(axisX);
//			model.setYAxisLabel(axisY);
//			model.setZAxisLabel("U");
//			model.setXMax(x[x.length-1]);
//			model.setXMin(x[0]);
//			model.setYMax(y[y.length-1]);
//			model.setYMin(y[0]);
//			model.setZMax(maxU);
//			model.setZMin(minU);
//			model.setStepSizeX(stepSize);
//			model.setStepSizeY(stepSize);
//			model.setGridData(gridData);
//			model.setGPDM(false);
//			
//			canvas.setModel(model);
//			canvas.repaint();
//		}
//		//draw gpdm
//		else if( indexX == -1 ){
//			double[] x = LandscapeView.increment(grn_.getMinX(), (grn_.getMaxX()-grn_.getMinX())/grn_.getN(), grn_.getMaxX());
//			double[] y = LandscapeView.increment(grn_.getMinY(), (grn_.getMaxY()-grn_.getMinY())/grn_.getN(), grn_.getMaxY());
//			DoubleMatrix2D Yout = grn_.getAllY();
//			
//			double[][] gridData = new double[x.length][y.length];	
//			
//			int countNum = 0;
//			for(int i=0;i<x.length;i++){
//				for(int j=0;j<y.length;j++){
//					DoubleMatrix1D currentY = Yout.viewRow(countNum);
//					double u = 0;
//					//all types
//					for(int k1=0;k1<grn_.getSumPara().rows();k1++){
//						double u1 = 1;
//						for(int index=0;index<currentY.size();index++){
//							currentY.set(index, Math.abs(currentY.get(index)));
//							u1 *= Math.exp(-1.0*Math.pow((currentY.get(index)-grn_.getSumPara().get(k1, index)), 2)/2.0/grn_.getSumPara().get(k1, index+n))/grn_.getSumPara().get(k1, index+n)/Math.sqrt(2.0*Math.PI);
//						}
//						
//						//in case that u1 is too large
//						if( u1>100 )
//							u1=100;
//						u += u1*grn_.getCounts()[k1]/((double)its);
//					}
//
//					double up = -1.0*Math.log(u);
//					if( up>100 )
//						up=100;
//
//					gridData[i][j] = up;
//
//
//					if(gridData[i][j] >maxU)
//						maxU = gridData[i][j] ;
//					if(gridData[i][j] <minU)
//						minU = gridData[i][j] ;
//					
//					countNum++;
//				}
//			}
//			
//			//set data output
//			grn_.setGridData(new DenseDoubleMatrix2D(gridData));
//			
//			//refresh figure
//			canvas.destroyImage();
//			
//			LandscapeSurfaceModel model = new LandscapeSurfaceModel();
//			model.setXAxisLabel(axisX);
//			model.setYAxisLabel(axisY);
//			model.setZAxisLabel("U");
//			double xmax = x[x.length-1];
//			double xmin = x[0];
//			
//			double ymax = y[y.length-1];
//			double ymin = y[0];
//			
//			double stepx = (xmax-xmin)/grn_.getN();
//			double stepy = (ymax-ymin)/grn_.getN();
//			
//			xmax = xmin + stepx*grn_.getN();
//			ymax = ymin + stepy*grn_.getN();
//			
//			double[] x1 = LandscapeView.increment(xmin, stepx, xmax);
//			double[] y1 = LandscapeView.increment(ymin, stepy, ymax);
// 			
//			
//			
//			model.setXMax(x1[x1.length-1]);			
//			model.setXMin(x1[0]);		
//			model.setYMax(y1[y1.length-1]);		
//			model.setYMin(y1[0]);
//			model.setZMax(maxU);
//			model.setZMin(minU);
//	
//			grn_.setMaxX(x1[x1.length-1]);
//			grn_.setMinX(x1[0]);
//			grn_.setMaxY(y1[y1.length-1]);
//			grn_.setMinY(y1[0]);
//			grn_.setX(new DenseDoubleMatrix1D(x1));
//			grn_.setY(new DenseDoubleMatrix1D(y1));
//			
//			model.setStepSizeX(stepx);
//			model.setStepSizeY(stepy);
//			model.setGridData(gridData);
//			model.setGPDM(true);
//			
//			canvas.setModel(model);
//			canvas.repaint();
//			
//		}//end of else gpdm
////		else{ //display of entropy
////			double[] x = LandscapeView.increment(grn_.getMinX(), (grn_.getMaxX()-grn_.getMinX())/grn_.getN(), grn_.getMaxX());
////			double[] y = LandscapeView.increment(grn_.getMinY(), (grn_.getMaxY()-grn_.getMinY())/grn_.getN(), grn_.getMaxY());
////			DoubleMatrix2D Yout = grn_.getAllY();
////			
////			//calculate the network entropy
////			//write entropy
////			//input file
////			String filename = "temp_"+System.currentTimeMillis();
////			String temppath = System.getProperty("java.io.tmpdir");
////			File f = new File(temppath);
////			File fTemp = File.createTempFile(filename, ".entropy_input", f);
////				
////			URL url = fTemp.toURI().toURL();
////			writeEntropy(url,Yout);		
////
////			//output file
////			String outputModelName = "temp_"+System.currentTimeMillis();
////			File fout = new File(temppath);
////			File fTempout = File.createTempFile(outputModelName, ".entropy_output", fout);
////
////			//run GPDM
////			runNetworkEntropy(temppath,fTemp.getName(),fTempout.getName());
////
////			//read output file
////			double[][] gridData = new double[x.length][y.length];	
////			readEntropyOutput(fTempout, gridData, x.length);
////
////			//draw landscape
////			for(int i=0;i<x.length;i++){
////				for(int j=0;j<y.length;j++){
////					if(gridData[i][j] >maxU)
////						maxU = gridData[i][j] ;
////					if(gridData[i][j] <minU)
////						minU = gridData[i][j] ;
////				}
////			}
////
////			//set griddata
////			grn_.setGridData(new DenseDoubleMatrix2D(gridData));
////			
////			//refresh figure
////			canvas.destroyImage();
////
////			LandscapeSurfaceModel model = new LandscapeSurfaceModel();
////			model.setXAxisLabel(axisX);
////			model.setYAxisLabel(axisY);
////			model.setZAxisLabel("Entropy");
////			float xmax = (float) ((int)(x[x.length-1]*100))/100;
////			float xmin = (float) ((int) (x[0]*100))/100;
////			
////			float ymax = (float) ((int)(y[y.length-1]*100))/100;
////			float ymin = (float) ((int) (y[0]*100))/100;
////			
////			float stepx = (float) (((int)((xmax-xmin)/grn_.getN()*100)))/100;
////			float stepy = (float) (((int)((ymax-ymin)/grn_.getN()*100)))/100;
////			
////			xmax = xmin + stepx*grn_.getN();
////			ymax = ymin + stepy*grn_.getN();
////			
////			double[] x1 = LandscapeView.increment(xmin, stepx, xmax);
////			double[] y1 = LandscapeView.increment(ymin, stepy, ymax);
//// 			
////			
////			model.setXMax((float) x1[x1.length-1]);			
////			model.setXMin((float) x1[0]);		
////			model.setYMax((float) y1[y1.length-1]);		
////			model.setYMin((float) y1[0]);
////			//maxU = (float) ((int) maxU*100)/100;
////			model.setZMax((float) maxU);
////			//minU = (float) ((int) minU*100)/100;
////			model.setZMin((float) minU);
////	
////			model.setStepSizeX(stepx);
////			model.setStepSizeY(stepy);
////			model.setGridData(gridData);
////			
////			canvas.setModel(model);
////			canvas.repaint();
////			
////			fTemp.deleteOnExit();
////			fTempout.deleteOnExit();
////		}
//			
//		
//	}
	
	
	
	private void readEntropyOutput(File fTempnew, double[][] gridData, int npoints) {		
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader(fTempnew));
            String tempString = null;

            tempString = reader.readLine();
            String temp[] = tempString.split(" ");
            
            System.out.print(temp.length+"\t"+npoints+"\t"+temp[32]+"\n");
            int counts = 0;
            for(int i=0;i<npoints;i++)
            	for(int j=0;j<npoints;j++){
            		if( temp[counts].equals("nan") ){
            			if( counts == 0 )
            				temp[counts] = "0";
            			else
            				temp[counts] = temp[counts-1];
            		}
            			
            		System.out.print(i+"\t"+j+"\t"+counts+"\t"+temp[counts].getClass().getName()+"\n");
            		gridData[i][j] = Double.parseDouble(temp[counts]);
            		counts++;
            	}
            
            
            while ((tempString = reader.readLine()) != null) {
            }
            
            reader.close();
            
        } catch (IOException e) {
        	JOptionPane.showMessageDialog(null, "Error in saving files!", "Error", JOptionPane.INFORMATION_MESSAGE);
        	MsgManager.Messages.errorMessage(e, "Error", "");
        } finally {
            if (reader != null) {
                try {
                    reader.close();            
                } catch (IOException e1) {
                	JOptionPane.showMessageDialog(null, "Error in saving files!", "Error", JOptionPane.INFORMATION_MESSAGE);
                	MsgManager.Messages.errorMessage(e1, "Error", "");
                }
            }
        }
    	
	}


	private void runNetworkEntropy(String temppath, String inputfile, String outputfile) {
		Runtime rn = Runtime.getRuntime();
		Process p = null;
		try {
//			//for standalone package
//			String programPath = getClass().getProtectionDomain().getCodeSource().getLocation().getPath();
//			programPath = programPath.replaceAll("^/", "");
//			programPath = programPath.replaceAll("\\/", "\\\\");	
//			programPath = programPath.substring(0, programPath.lastIndexOf("\\")+1)+"Entropy";
			
			//for ide
			String programPath = "./Entropy";			
			
            System.out.print("Run NetworkEntropy \n") ;
			
			p = rn.exec("cmd /c entropy.exe -i "+temppath+"\\"+inputfile+" -o "+temppath+"\\"+outputfile,null, new File(programPath));
			
			
			BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
			String msg = null;
			while ((msg = br.readLine()) != null) {
				System.out.println(msg);
			}
			
			int exitVal = p.waitFor();
//			System.out.println("Process exitValue: " + exitVal);
			
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Error in execution of entropy!", "Error", JOptionPane.INFORMATION_MESSAGE);
			MsgManager.Messages.errorMessage(e, "Error", "");
		}	
		
	}


	private int writeEntropy(URL filename, DoubleMatrix2D yout) {
		// Create a new SBMLDocument object, using SBML Level 1 Version 2.		
		try {
			FileWriter fw = new FileWriter(filename.getPath());
			
			fw.write(yout.rows()+" "+yout.columns()+"\n");

			//write trajectories rows*cols		
			for(int i=0;i<yout.rows();i++){
				fw.write(""+yout.get(i, 0));
				for(int j=1;j<yout.columns();j++)
					fw.write(" "+yout.get(i, j));
				fw.write("\n");
			}
			
			//write connectivity matrix
			GeneNetwork grn = ((DynamicalModelElement)item_).getGeneNetwork();
			int ngenes = grn.getNodes().size();
			ArrayList<Node> nodes = grn.getNodes();
			DoubleMatrix1D connMatrix = new DenseDoubleMatrix1D(ngenes*ngenes);
			int counts = 0;
			//set content 
			for(int i=0;i<ngenes;i++){
				Gene targetGene = (Gene) grn.getNode(i);
				
				ArrayList<Gene> inputGenes = ((Gene) targetGene).getInputGenes();
				for(int j=0;j<ngenes;j++){
					int flag = 0;
					for(int k=0;k<inputGenes.size();k++)
						if( inputGenes.get(k).getLabel().equals(nodes.get(j).getLabel()) ){
							connMatrix.set(counts, 1);
							flag = 1;
						}
					if( flag == 0 )
						connMatrix.set(counts, 0);
					counts++;
				}
			}//end of for
			
			//write to file
			fw.write(connMatrix.get(0)+"");
			for(int i=1;i<counts;i++)
				fw.write(" "+connMatrix.get(i));
			fw.write("\n");
			
			fw.close(); 
		} catch (IOException e1) {
			JOptionPane.showMessageDialog(null, "Cannot load the entropy_input file", "Error", JOptionPane.INFORMATION_MESSAGE);
			MsgManager.Messages.errorMessage(e1, "Error", "");
		}   


		return 0;
	}


}


